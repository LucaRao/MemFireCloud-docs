<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>微信小程序 on My New Hugo Site</title>
    <link>https://github.com/docs/app/example/wechat/</link>
    <description>Recent content in 微信小程序 on My New Hugo Site</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    <lastBuildDate>Wed, 13 Dec 2023 17:39:49 +0800</lastBuildDate>
    <atom:link href="https://github.com/docs/app/example/wechat/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>BBS论坛小程序</title>
      <link>https://github.com/docs/app/example/wechat/hellobbs/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      <guid>https://github.com/docs/app/example/wechat/hellobbs/</guid>
      <description>helloBBS是一个发布个人心情，查看别人发表的论坛，可以评论回复点赞的论坛小程序。论坛小程序后端服务使用了MemFire Cloud，其中使用到的MemFire Cloud功能包括：&#xA;云数据库：存储论坛小程序数据表的信息。&#xA;用户验证：论坛小程序使用MemFire Cloud提供的用户认证的API接口，快速完成用户注册登录操作。&#xA;即时API：创建数据表时会自动生成 API。&#xA;对象存储：存储用户发布帖子中的图片。&#xA;创建应用 link目的：通过创建的一个MemFire Cloud应用来获得数据库、对象存储等一系列资源，并将获得该应用专属的API访问链接和访问密钥，用户可以轻松的调用API接口与以上资源进行交互。&#xA;登录https://cloud.MemFiredb.com/auth/login， 在“我的应用”页面创建一个新应用&#xA;创建数据表 link第一种：点击进入应用详情页面，在“数据表”页面可视化建表。&#xA;第二种：在首页的数据库管理找到该应用的数据库的&amp;quot;SQL查询&amp;quot;，用MemFire Cloud 自带的sql编辑器进行建表。&#xA;1.创建post_list表 link在数据表页面，点击“新建数据表”，创建post_list表。post_list表主要记录发表的帖子的列表，表结构字段如下： 名称 类型 描述 id int8 主键，自增，唯一标识ID userName text 用户名 times timetamptz 创建时间 content text 内容 avatar text 头像资料 content_imgs text 发表的图片资源 tag_val text 帖子类型 建表页面配置：&#xA;sql操作如下:&#xA;CREATE TABLE &amp;#34;public&amp;#34;.&amp;#34;post_list&amp;#34; ( &amp;#34;id&amp;#34; SERIAL,&#xD;&amp;#34;times&amp;#34; TIMESTAMP WITH TIME ZONE NOT NULL DEFAULT &amp;#39;2022-09-20 11:10:55.482198&amp;#43;08&amp;#39;::timestamp with time zone ,&#xD;&amp;#34;userName&amp;#34; TEXT NOT NULL,&#xD;&amp;#34;content&amp;#34; TEXT NOT NULL,&#xD;&amp;#34;avatar&amp;#34; TEXT NULL,&#xD;&amp;#34;content_imgs&amp;#34; TEXT NULL,&#xD;&amp;#34;tag_val&amp;#34; TEXT NULL,&#xD;CONSTRAINT &amp;#34;post_list_pkey&amp;#34; PRIMARY KEY (&amp;#34;id&amp;#34;)&#xD;);&#xD;2.</description>
    </item>
    <item>
      <title>别踩白块游戏小程序</title>
      <link>https://github.com/docs/app/example/wechat/notclickwhite/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      <guid>https://github.com/docs/app/example/wechat/notclickwhite/</guid>
      <description>“踩白块会输”是一个简单的微信小程序游戏，灵感来自当年火热的别踩白块游戏，程序内分成三个模块：手残模式、经典模式和极速模式，分别对应由易到难的三种玩法，可以查看游戏排名。动画效果采用JS实现，小程序后端服务使用了MemFire Cloud，其中使用到的MemFire Cloud功能包括：&#xA;云数据库：存储小程序数据表的信息。&#xA;用户验证：小程序使用MemFire Cloud提供的用户认证的API接口，快速完成用户注册登录操作。&#xA;即时API：创建数据表时会自动生成 API。&#xA;创建应用 link目的：通过创建的一个MemFire Cloud应用来获得数据库、对象存储等一系列资源，并将获得该应用专属的API访问链接和访问密钥，用户可以轻松的调用API接口与以上资源进行交互。&#xA;登录https://cloud.MemFiredb.com/auth/login， 在“我的应用”页面创建一个新应用&#xA;创建数据表 link点击进入应用详情页面，在“数据表”页面可视化建表。&#xA;1.创建gamer表 link在数据表页面，点击“新建数据表”，创建gamer表。gamer表主要记录游戏玩家信息和各个游戏模式的最高分信息，表结构字段如下： 名称 类型 描述 id int8 主键，自增，唯一标识ID user_name text 用户名（唯一） created_at timetamptz 创建时间 get_started_highscore int8 手残模式最高分数（可空） classic_highscore int8 经典模式最高分数（可空） extreme_speed_highscore int8 极速模式最高分数（可空） 建表页面配置：&#xA;sql操作如下:&#xA;CREATE TABLE &amp;#34;public&amp;#34;.&amp;#34;gamer&amp;#34; ( &amp;#34;id&amp;#34; SERIAL,&#xD;&amp;#34;created_at&amp;#34; TIMESTAMP WITH TIME ZONE NOT NULL DEFAULT &amp;#39;2022-09-16 15:23:36.89768&amp;#43;08&amp;#39;::timestamp with time zone ,&#xD;&amp;#34;user_name&amp;#34; TEXT NOT NULL,&#xD;&amp;#34;get_started_highscore&amp;#34; BIGINT NULL,&#xD;&amp;#34;classic_highscore&amp;#34; BIGINT NULL,&#xD;&amp;#34;extreme_speed_highscore&amp;#34; BIGINT NULL,&#xD;CONSTRAINT &amp;#34;gamer_pkey&amp;#34; PRIMARY KEY (&amp;#34;id&amp;#34;)&#xD;);&#xD;2.</description>
    </item>
    <item>
      <title>Super课表小程序</title>
      <link>https://github.com/docs/app/example/wechat/timetable/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      <guid>https://github.com/docs/app/example/wechat/timetable/</guid>
      <description>此示例提供了使用 MemFire Cloud 构建一个课表的小程序的步骤。小程序用到的MemFire Cloud的功能包括：&#xA;云数据库：存储小程序数据表的信息。&#xA;用户验证：小程序使用MemFire Cloud提供的用户认证的API接口，快速完成用户注册登录操作。&#xA;对象存储：存储小程序的注册用户上传的头像。&#xA;行级安全策略：采用RLS策略来限制用户访问行为，用户可以修改个人信息，上传个人头像。&#xA;即时API：创建数据表时会自动生成 API。&#xA;创建应用 link目的：通过创建的一个MemFire Cloud应用来获得数据库、对象存储等一系列资源，并将获得该应用专属的API访问链接和访问密钥，用户可以轻松的调用API接口与以上资源进行交互。&#xA;登录https://cloud.MemFiredb.com/auth/login, 在“我的应用”页面创建一个新应用&#xA;创建数据表 link点击进入应用详情页面，在“数据表”页面可视化建表。&#xA;1.创建school表 link在数据表页面，点击“新建数据表”，创建school表。school表主要记录学校信息，表结构字段如下： 名称 类型 描述 id int8 主键，自增，唯一标识ID schoolName text 学校名称（唯一） updated_at timeatamptz 修改时间 建表页面配置：&#xA;数据表创建完后可在school表中手动插入几条学校信息数据 ，如下图。&#xA;sql操作如下:&#xA;CREATE TABLE &amp;#34;public&amp;#34;.&amp;#34;school&amp;#34; ( &amp;#34;id&amp;#34; BIGINT NOT NULL,&#xD;&amp;#34;updated_at&amp;#34; TIMESTAMP WITH TIME ZONE NOT NULL,&#xD;&amp;#34;schoolName&amp;#34; TEXT NOT NULL,&#xD;CONSTRAINT &amp;#34;school_pkey&amp;#34; PRIMARY KEY (&amp;#34;id&amp;#34;),&#xD;CONSTRAINT &amp;#34;school_schoolName_key&amp;#34; UNIQUE (&amp;#34;schoolName&amp;#34;)&#xD;);&#xD;INSERT INTO &amp;#34;public&amp;#34;.&amp;#34;school&amp;#34; (&amp;#34;id&amp;#34;, &amp;#34;updated_at&amp;#34;, &amp;#34;schoolName&amp;#34;) VALUES (&amp;#39;1&amp;#39;, &amp;#39;2022-08-12 18:43:53.</description>
    </item>
    <item>
      <title>微信小程序聊天室</title>
      <link>https://github.com/docs/app/example/wechat/wechatroom/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      <guid>https://github.com/docs/app/example/wechat/wechatroom/</guid>
      <description>本示例是一个可以实现多人互动的角色扮演聊天室的微信小程序，小程序后端服务使用了MemFire Cloud，其中使用到的MemFire Cloud功能包括：&#xA;其中使用到的MemFire Cloud功能包括：&#xA;云数据库：存储聊天室小程序数据表的信息。 即时API：创建数据表时会自动生成 API。 对象存储：存储用户发布帖子中的图片。 Realtime：轻松构建任何类型的实时应用程序 创建应用 link目的：通过创建的一个MemFire Cloud应用来获得数据库、对象存储等一系列资源，并将获得该应用专属的API访问链接和访问密钥，用户可以轻松的调用API接口与以上资源进行交互。&#xA;登录MemFire Cloud， 在“我的应用”页面创建一个新应用&#xA;创建数据表 link创建messages表 link建表操作如下：&#xA;在“表编辑器”页面，点击“新建表”，创建messages表。messages表主要记录用户发送的每一条信息，表结构字段如下： 名称 类型 描述 id bigint 主键，自动为列分配一个连续的唯一编号，唯一标识ID username varchar 用户名 bgColor varchar 头像背景颜色 created_at timetamptz 创建时间 text text 消息 sql建表语句&#xA;CREATE TABLE messages (&#xD;id bigint GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,&#xD;username VARCHAR NOT NULL,&#xD;bgColor VARCHAR NOT NULL,&#xD;text TEXT NOT NULL,&#xD;timestamp timestamp default now() NOT NULL&#xD;);&#xD;创建策略 link接下来，需要给messages表创建两条策略，分别是允许所有用户可以查询和插入messages表数据，在“SQL执行器”页面，点击“新查询”按钮，新建一个SQL Query，执行以下操作：</description>
    </item>
  </channel>
</rss>
