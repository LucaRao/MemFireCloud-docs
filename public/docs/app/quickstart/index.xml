<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>快速入门 on My New Hugo Site</title>
    <link>http://localhost:1313/docs/app/quickstart/</link>
    <description>Recent content in 快速入门 on My New Hugo Site</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    <lastBuildDate>Mon, 01 Jan 0001 00:00:00 +0000</lastBuildDate>
    <atom:link href="http://localhost:1313/docs/app/quickstart/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>快速入门: Vue</title>
      <link>http://localhost:1313/docs/app/quickstart/with-vue-3/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      <guid>http://localhost:1313/docs/app/quickstart/with-vue-3/</guid>
      <description>第一步：在 MemFire Cloud 仪表板中创建一个新应用。 link应用准备就绪后，进入应用，在左侧菜单-&amp;gt;表编辑器选择 SQL 编辑器在 MemFire Cloud 数据库中创建一个表。使用以下 SQL 语句创建包含一些示例数据的国家/地区表。&#xA;-- Create the table&#xD;CREATE TABLE countries (&#xD;id SERIAL PRIMARY KEY,&#xD;name VARCHAR(255) NOT NULL&#xD;);&#xD;-- Insert some sample data into the table&#xD;INSERT INTO countries (name) VALUES (&amp;#39;United States&amp;#39;);&#xD;INSERT INTO countries (name) VALUES (&amp;#39;Canada&amp;#39;);&#xD;INSERT INTO countries (name) VALUES (&amp;#39;Mexico&amp;#39;);&#xD;第二步：创建 Vue 应用 link使用 npm init 命令创建 Vue 应用。&#xA;npm init vue@latest my-app&#xD;第三步：安装 Supabase 客户端库 link最快的入门方法是使用 supabase-js 客户端库，它提供了一些简便的API，用于在 Vue 应用程序中使用 Supabase。 导航到 Vue 应用程序并安装 supabase-js 。</description>
    </item>
    <item>
      <title>快速入门: React</title>
      <link>http://localhost:1313/docs/app/quickstart/with-react/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      <guid>http://localhost:1313/docs/app/quickstart/with-react/</guid>
      <description>第一步：在 MemFire Cloud 仪表板中创建一个新应用。 link应用准备就绪后，进入应用，在左侧菜单-&amp;gt;表编辑器选择 SQL 编辑器在 MemFire Cloud 数据库中创建一个表。使用以下 SQL 语句创建包含一些示例数据的国家/地区表。&#xA;-- Create the table&#xD;CREATE TABLE countries (&#xD;id SERIAL PRIMARY KEY,&#xD;name VARCHAR(255) NOT NULL&#xD;);&#xD;-- Insert some sample data into the table&#xD;INSERT INTO countries (name) VALUES (&amp;#39;United States&amp;#39;);&#xD;INSERT INTO countries (name) VALUES (&amp;#39;Canada&amp;#39;);&#xD;INSERT INTO countries (name) VALUES (&amp;#39;Mexico&amp;#39;);&#xD;第二步：创建 React 应用 link使用 Vite 模板创建 React 应用。&#xA;npm create vite@latest my-app -- --template react&#xD;第三步：安装 Supabase 客户端库 link最快的入门方法是使用 supabase-js 客户端库，它提供了一些简便的API，用于在 React 应用程序中使用 Supabase。 导航到 React 应用程序并安装 supabase-js 。</description>
    </item>
    <item>
      <title>快速入门: Flutter</title>
      <link>http://localhost:1313/docs/app/quickstart/with-flutter/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      <guid>http://localhost:1313/docs/app/quickstart/with-flutter/</guid>
      <description>第一步：在 MemFire Cloud 仪表板中创建一个新应用。 link应用准备就绪后，进入应用，在左侧菜单-&amp;gt;表编辑器选择 SQL 编辑器在 MemFire Cloud 数据库中创建一个表。使用以下 SQL 并自行运行。&#xA;info&#xD;在本地工作时，可以运行以下命令创建新的迁移文件：&#xA;supabase migration new user_management_starter&#xD;-- Create a table for public profiles&#xD;create table profiles (&#xD;id uuid references auth.users not null primary key,&#xD;updated_at timestamp with time zone,&#xD;username text unique,&#xD;full_name text,&#xD;avatar_url text,&#xD;website text,&#xD;constraint username_length check (char_length(username) &amp;gt;= 3)&#xD;);&#xD;-- Set up Row Level Security (RLS)&#xD;-- See https://supabase.com/docs/guides/auth/row-level-security for more details.</description>
    </item>
    <item>
      <title>快速入门: Next.js</title>
      <link>http://localhost:1313/docs/app/quickstart/with-nextjs/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      <guid>http://localhost:1313/docs/app/quickstart/with-nextjs/</guid>
      <description>第一步：在 MemFire Cloud 仪表板中创建一个新应用。 link应用准备就绪后，进入应用，在左侧菜单-&amp;gt;表编辑器选择 SQL 编辑器在 MemFire Cloud 数据库中创建一个表。使用以下 SQL 语句创建包含一些示例数据的国家/地区表。&#xA;-- Create the table&#xD;CREATE TABLE countries (&#xD;id SERIAL PRIMARY KEY,&#xD;name VARCHAR(255) NOT NULL&#xD;);&#xD;-- Insert some sample data into the table&#xD;INSERT INTO countries (name) VALUES (&amp;#39;United States&amp;#39;);&#xD;INSERT INTO countries (name) VALUES (&amp;#39;Canada&amp;#39;);&#xD;INSERT INTO countries (name) VALUES (&amp;#39;Mexico&amp;#39;);&#xD;第二步：创建 Next.js 应用 link使用 npx 模板创建 Next.js 应用。&#xA;npx create-next-app my-next-app&#xD;第三步：安装 Supabase 客户端库 link最快的入门方法是使用 supabase-js 客户端库，它提供了一些简便的API，用于在 Next.</description>
    </item>
    <item>
      <title>快速入门: Angular</title>
      <link>http://localhost:1313/docs/app/quickstart/with-angular/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      <guid>http://localhost:1313/docs/app/quickstart/with-angular/</guid>
      <description>GitHub link如果你在阅读指南时遇到困难，请参考此版本&#xA;构建应用程序 link让我们开始从头开始构建Angular应用程序。&#xA;初始化一个Angular应用程序 link我们可以使用[Angular CLI]（https://angular.io/cli）来初始化 一个名为`supabase-angular&amp;rsquo;的应用程序：&#xA;npx ng new supabase-angular --routing false --style css&#xD;cd supabase-angular&#xD;然后让我们安装唯一的额外依赖：supabase-js&#xA;npm install @supabase/supabase-js&#xD;最后我们要在environment.ts文件中保存环境变量。 我们所需要的是API URL和你[早些时候]复制的anon密钥(#get-theapi-keys)。 这些变量将暴露在浏览器上，这完全没有问题，因为我们在数据库上启用了行级安全。&#xA;export const environment = {&#xD;production: false,&#xD;supabaseUrl: &amp;#39;YOUR_SUPABASE_URL&amp;#39;,&#xD;supabaseKey: &amp;#39;YOUR_SUPABASE_KEY&amp;#39;,&#xD;}&#xD;现在我们已经有了API凭证，让我们用ng g s supabase创建一个SupabaseService，以初始化Supabase客户端并实现与Supabase API通信的功能。&#xA;import { Injectable } from &amp;#39;@angular/core&amp;#39;&#xD;import {&#xD;AuthChangeEvent,&#xD;AuthSession,&#xD;createClient,&#xD;Session,&#xD;SupabaseClient,&#xD;User,&#xD;} from &amp;#39;@supabase/supabase-js&amp;#39;&#xD;import { environment } from &amp;#39;src/environments/environment&amp;#39;&#xD;import { Database } from &amp;#39;src/schema&amp;#39;&#xD;export interface Profile {&#xD;id?</description>
    </item>
    <item>
      <title>快速入门: Android Kotlin</title>
      <link>http://localhost:1313/docs/app/quickstart/with-kotlin/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      <guid>http://localhost:1313/docs/app/quickstart/with-kotlin/</guid>
      <description>第一步：在 MemFire Cloud 仪表板中创建一个新应用。 link应用准备就绪后，进入应用，在左侧菜单-&amp;gt;表编辑器选择 SQL 编辑器在 MemFire Cloud 数据库中创建一个表。使用以下 SQL 语句创建包含一些示例数据的国家/地区表。&#xA;-- Create the table&#xD;CREATE TABLE countries (&#xD;id SERIAL PRIMARY KEY,&#xD;name VARCHAR(255) NOT NULL&#xD;);&#xD;-- Insert some sample data into the table&#xD;INSERT INTO countries (name) VALUES (&amp;#39;United States&amp;#39;);&#xD;INSERT INTO countries (name) VALUES (&amp;#39;Canada&amp;#39;);&#xD;INSERT INTO countries (name) VALUES (&amp;#39;Mexico&amp;#39;);&#xD;第二步：使用 Android Studio 创建 Android 应用 link打开 Android Studio &amp;gt; 新建 &amp;gt; 新建 Android 项目。</description>
    </item>
    <item>
      <title>快速入门: Nuxt 3</title>
      <link>http://localhost:1313/docs/app/quickstart/with-nuxt-3/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      <guid>http://localhost:1313/docs/app/quickstart/with-nuxt-3/</guid>
      <description>Github link如果你在阅读指南时遇到困难，请参考此版本。&#xA;构建应用程序 link让我们开始从头开始构建Vue 3应用程序。&#xA;初始化一个Nuxt 3应用程序 link我们可以使用nuxi init来创建一个名为nuxt-user-management的应用程序。&#xA;npx nuxi init nuxt-user-management&#xD;cd nuxt-user-management&#xD;然后让我们安装唯一的额外依赖：NuxtSupabase。我们只需要将NuxtSupabase作为一个开发依赖项导入。&#xA;npm install @nuxtjs/supabase --save-dev&#xD;最后，我们要把环境变量保存在.env中。 我们所需要的是API URL和你[早些时候]复制的anon密钥（#get-theapi-keys）。&#xA;SUPABASE_URL=&amp;#34;YOUR_SUPABASE_URL&amp;#34;&#xD;SUPABASE_KEY=&amp;#34;YOUR_SUPABASE_ANON_KEY&amp;#34;&#xD;这些变量将暴露在浏览器上，这完全没有问题，因为我们的数据库已经启用了行级安全。 关于NuxtSupabase的神奇之处在于，为了开始使用Supabase，我们只需要设置环境变量即可。 不需要初始化Supabase。该库将自动处理它。&#xA;还有一个可选的步骤是更新CSS文件assets/main.css以使应用程序看起来漂亮。 你可以找到这个文件的全部内容这里。&#xA;import { defineNuxtConfig } from &amp;#39;nuxt&amp;#39;&#xD;// https://v3.nuxtjs.org/api/configuration/nuxt.config&#xD;export default defineNuxtConfig({&#xD;modules: [&amp;#39;@nuxtjs/supabase&amp;#39;],&#xD;css: [&amp;#39;@/assets/main.css&amp;#39;],&#xD;})&#xD;设置Auth组件 link让我们建立一个Vue组件来管理登录和注册。我们将使用Magic Links，所以用户可以用他们的电子邮件登录，而不需要使用密码。&#xA;&amp;lt;template&amp;gt;&#xD;&amp;lt;form class=&amp;#34;row flex-center flex&amp;#34; @submit.prevent=&amp;#34;handleLogin&amp;#34;&amp;gt;&#xD;&amp;lt;div class=&amp;#34;col-6 form-widget&amp;#34;&amp;gt;&#xD;&amp;lt;h1 class=&amp;#34;header&amp;#34;&amp;gt;Supabase &amp;#43; Nuxt 3&amp;lt;/h1&amp;gt;&#xD;&amp;lt;p class=&amp;#34;description&amp;#34;&amp;gt;Sign in via magic link with your email below&amp;lt;/p&amp;gt;&#xD;&amp;lt;div&amp;gt;&#xD;&amp;lt;input class=&amp;#34;inputField&amp;#34; type=&amp;#34;email&amp;#34; placeholder=&amp;#34;Your email&amp;#34; v-model=&amp;#34;email&amp;#34; /&amp;gt;&#xD;&amp;lt;/div&amp;gt;&#xD;&amp;lt;div&amp;gt;&#xD;&amp;lt;input&#xD;type=&amp;#34;submit&amp;#34;&#xD;class=&amp;#34;button block&amp;#34;&#xD;:value=&amp;#34;loading ?</description>
    </item>
    <item>
      <title>快速入门: Svelte</title>
      <link>http://localhost:1313/docs/app/quickstart/with-svelte/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      <guid>http://localhost:1313/docs/app/quickstart/with-svelte/</guid>
      <description>GitHub link如果你在阅读指南时遇到困难，请参考此版本。&#xA;构建应用程序 link让我们从头开始构建Svelte应用程序。&#xA;初始化一个Svelte应用程序 link我们可以使用Vite Svelte TypeScript模板来初始化一个名为supabase-svelte的应用程序。&#xA;npm create vite@latest supabase-svelte -- --template svelte-ts&#xD;cd supabase-svelte&#xD;npm install&#xD;然后让我们安装唯一的额外依赖：supabase-js&#xA;npm install @supabase/supabase-js&#xD;最后，我们要把环境变量保存在.env中。 我们所需要的是API URL和你[早些时候]复制的anon密钥（#get-theapi-keys）。&#xA;VITE_SUPABASE_URL=YOUR_SUPABASE_URL&#xD;VITE_SUPABASE_ANON_KEY=YOUR_SUPABASE_ANON_KEY&#xD;现在我们已经有了API凭证，让我们创建一个辅助文件来初始化Supabase客户端。这些变量将被暴露在 在浏览器上，这完全没有问题，因为我们的数据库已经启用了行级安全。&#xA;import { createClient } from &amp;#39;@supabase/supabase-js&amp;#39;&#xD;const supabaseUrl = import.meta.env.VITE_SUPABASE_URL&#xD;const supabaseAnonKey = import.meta.env.VITE_SUPABASE_ANON_KEY&#xD;export const supabase = createClient(supabaseUrl, supabaseAnonKey)&#xD;还有一个可选的步骤是更新CSS文件src/app.css以使应用程序看起来漂亮。 你可以找到这个文件的全部内容这里。&#xA;设置一个登录组件 link让我们建立一个Svelte组件来管理登录和注册。我们将使用Magic Links，这样用户就可以用他们的电子邮件登录，而无需使用密码。&#xA;&amp;lt;script lang=&amp;#34;ts&amp;#34;&amp;gt;&#xD;import { supabase } from &amp;#39;src/supabaseClient&amp;#39;&#xD;let loading = false&#xD;let email = &amp;#39;&amp;#39;&#xD;const handleLogin = async () =&amp;gt; {&#xD;try {&#xD;loading = true&#xD;const { error } = await supabase.</description>
    </item>
    <item>
      <title>快速入门: Ionic Vue</title>
      <link>http://localhost:1313/docs/app/quickstart/with-ionic-vue/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      <guid>http://localhost:1313/docs/app/quickstart/with-ionic-vue/</guid>
      <description>GitHub link如果你在阅读指南时遇到困难，请参考此版本。&#xA;构建应用程序 link让我们开始从头开始构建Vue应用程序。&#xA;初始化一个Ionic Vue应用程序 link我们可以使用Ionic CLI来初始化 一个名为supabase-ionic-vue的应用程序。&#xA;npm install -g @ionic/cli&#xD;ionic start supabase-ionic-vue blank --type vue&#xD;cd supabase-ionic-vue&#xD;然后让我们安装唯一的额外依赖：supabase-js&#xA;npm install @supabase/supabase-js&#xD;最后，我们要把环境变量保存在.env中。 我们所需要的是API URL和你[早些时候]复制的anon密钥(#get-theapi-keys)。&#xA;VUE_APP_SUPABASE_URL=YOUR_SUPABASE_URL&#xD;VUE_APP_SUPABASE_ANON_KEY=YOUR_SUPABASE_ANON_KEY&#xD;现在我们已经有了API凭证，让我们创建一个辅助文件来初始化Supabase客户端。这些变量将被暴露在 在浏览器上，这完全没有问题，因为我们的数据库已经启用了行级安全。&#xA;import { createClient } from &amp;#39;@supabase/supabase-js&amp;#39;;&#xD;const supabaseUrl = process.env.VUE_APP_SUPABASE_URL as string;&#xD;const supabaseAnonKey = process.env.VUE_APP_SUPABASE_ANON_KEY as string;&#xD;export const supabase = createClient(supabaseUrl, supabaseAnonKey);&#xD;设置一个登录路由 link让我们建立一个Vue组件来管理登录和注册。我们将使用Magic Links，所以用户可以用他们的电子邮件登录，而不需要使用密码。&#xA;&amp;lt;template&amp;gt;&#xD;&amp;lt;ion-page&amp;gt;&#xD;&amp;lt;ion-header&amp;gt;&#xD;&amp;lt;ion-toolbar&amp;gt;&#xD;&amp;lt;ion-title&amp;gt;Login&amp;lt;/ion-title&amp;gt;&#xD;&amp;lt;/ion-toolbar&amp;gt;&#xD;&amp;lt;/ion-header&amp;gt;&#xD;&amp;lt;ion-content&amp;gt;&#xD;&amp;lt;div class=&amp;#34;ion-padding&amp;#34;&amp;gt;&#xD;&amp;lt;h1&amp;gt;Supabase &amp;#43; Ionic Vue&amp;lt;/h1&amp;gt;&#xD;&amp;lt;p&amp;gt;Sign in via magic link with your email below&amp;lt;/p&amp;gt;&#xD;&amp;lt;/div&amp;gt;&#xD;&amp;lt;ion-list inset=&amp;#34;true&amp;#34;&amp;gt;&#xD;&amp;lt;form @submit.</description>
    </item>
    <item>
      <title>快速入门: Expo</title>
      <link>http://localhost:1313/docs/app/quickstart/with-expo/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      <guid>http://localhost:1313/docs/app/quickstart/with-expo/</guid>
      <description>GitHub link如果你在阅读指南时遇到困难，请参考此版本&#xA;构建应用程序 link让我们开始从头开始构建React Native应用。&#xA;初始化一个React Native应用 link我们可以使用expo来初始化 一个名为 &amp;ldquo;expo-user-management &amp;ldquo;的应用程序。&#xA;npx create-expo-app -t expo-template-blank-typescript expo-user-management&#xD;cd expo-user-management&#xD;然后让我们安装额外的依赖项。supabase-js&#xA;npm install @supabase/supabase-js&#xD;npm install react-native-elements @react-native-async-storage/async-storage react-native-url-polyfill&#xD;现在让我们创建一个辅助文件来初始化Supabase客户端。 我们需要API URL和你[早些时候]复制的anon密钥（#get-the-api-keys）。 这些变量将被暴露在浏览器上，这完全没有问题，因为我们有 行级安全在我们的数据库上启用。&#xA;import AsyncStorage from &amp;#39;@react-native-async-storage/async-storage&amp;#39;&#xD;import { createClient } from &amp;#39;@supabase/supabase-js&amp;#39;&#xD;const supabaseUrl = YOUR_REACT_NATIVE_SUPABASE_URL&#xD;const supabaseAnonKey = YOUR_REACT_NATIVE_SUPABASE_ANON_KEY&#xD;export const supabase = createClient(supabaseUrl, supabaseAnonKey, {&#xD;auth: {&#xD;storage: AsyncStorage as any,&#xD;autoRefreshToken: true,&#xD;persistSession: true,&#xD;detectSessionInUrl: false,&#xD;},&#xD;})&#xD;设置一个登录组件 link让我们建立一个React Native组件来管理登录和注册。 用户将能够用他们的电子邮件和密码登录。</description>
    </item>
    <item>
      <title>快速入门: Ionic Angular</title>
      <link>http://localhost:1313/docs/app/quickstart/with-ionic-angular/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      <guid>http://localhost:1313/docs/app/quickstart/with-ionic-angular/</guid>
      <description>GitHub link如果你在阅读指南时遇到困难，请参考此版本&#xA;构建应用程序 link让我们开始从头开始构建Angular应用程序。&#xA;初始化一个Ionic Angular应用程序 link我们可以使用Ionic CLI来初始化 一个名为supabase-ionic-angular的应用程序。&#xA;npm install -g @ionic/cli&#xD;ionic start supabase-ionic-angular blank --type angular&#xD;cd supabase-ionic-angular&#xD;然后让我们安装唯一的额外依赖：supabase-js&#xA;npm install @supabase/supabase-js&#xD;最后我们要在environment.ts文件中保存环境变量。 我们所需要的是API URL和你[早些时候]复制的anon密钥(#get-theapi-keys)。 这些变量将暴露在浏览器上，这完全没有问题，因为我们在数据库上启用了行级安全。&#xA;export const environment = {&#xD;production: false,&#xD;supabaseUrl: &amp;#39;YOUR_SUPABASE_URL&amp;#39;,&#xD;supabaseKey: &amp;#39;YOUR_SUPABASE_KEY&amp;#39;,&#xD;}&#xD;现在我们有了API凭证，让我们用ionic g s supabase创建一个SupabaseService，以初始化Supabase客户端，并实现与Supabase API通信的功能。&#xA;import { Injectable } from &amp;#39;@angular/core&amp;#39;&#xD;import { LoadingController, ToastController } from &amp;#39;@ionic/angular&amp;#39;&#xD;import { AuthChangeEvent, createClient, Session, SupabaseClient } from &amp;#39;@supabase/supabase-js&amp;#39;&#xD;import { environment } from &amp;#39;.</description>
    </item>
    <item>
      <title>快速入门: Ionic React</title>
      <link>http://localhost:1313/docs/app/quickstart/with-ionic-react/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      <guid>http://localhost:1313/docs/app/quickstart/with-ionic-react/</guid>
      <description>GitHub link如果你在阅读指南时遇到困难，请参考此版本。&#xA;构建应用程序 link让我们开始从头开始构建React应用程序。&#xA;初始化一个Ionic React应用程序 link我们可以使用Ionic CLI来初始化 一个名为 supabase-ionic-react的应用程序。&#xA;npm install -g @ionic/cli&#xD;ionic start supabase-ionic-react blank --type react&#xD;cd supabase-ionic-react&#xD;然后让我们安装唯一的额外依赖：supabase-js&#xA;npm install @supabase/supabase-js&#xD;最后，我们要把环境变量保存在.env中。 我们所需要的是API URL和你[早些时候]复制的anon密钥(#get-theapi-keys)。&#xA;REACT_APP_SUPABASE_URL=YOUR_SUPABASE_URL&#xD;REACT_APP_SUPABASE_ANON_KEY=YOUR_SUPABASE_ANON_KEY&#xD;现在我们已经有了API凭证，让我们创建一个辅助文件来初始化Supabase客户端。这些变量将被暴露在 在浏览器上，这完全没有问题，因为我们的数据库已经启用了行级安全。&#xA;import { createClient } from &amp;#39;@supabase/supabase-js&amp;#39;&#xD;const supabaseUrl = process.env.REACT_APP_SUPABASE_URL&#xD;const supabaseAnonKey = process.env.REACT_APP_SUPABASE_ANON_KEY&#xD;export const supabase = createClient(supabaseUrl, supabaseAnonKey)&#xD;设置一个登录路线 link让我们设置一个React组件来管理登录和注册。我们将使用Magic Links，所以用户可以用他们的电子邮件登录，而不使用密码。&#xA;import { useState } from &amp;#39;react&amp;#39;;&#xD;import {&#xD;IonButton,&#xD;IonContent,&#xD;IonHeader,&#xD;IonInput,&#xD;IonItem,&#xD;IonLabel,&#xD;IonList,&#xD;IonPage,&#xD;IonTitle,&#xD;IonToolbar,&#xD;useIonToast,&#xD;useIonLoading,&#xD;} from &amp;#39;@ionic/react&amp;#39;;&#xD;import { supabase } from &amp;#39;.</description>
    </item>
    <item>
      <title>快速入门: RedwoodJS</title>
      <link>http://localhost:1313/docs/app/quickstart/with-redwoodjs/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      <guid>http://localhost:1313/docs/app/quickstart/with-redwoodjs/</guid>
      <description>介绍 link为了与其他框架的Quickstart例子保持一致，我们将建立一个RedwoodJS，与正常情况下有点不同。&#xA;我们不使用Prisma连接到Supabase Postgres数据库或Prisma迁移，因为在Redwood应用中通常会这样做。 相反，我们将依靠Supabase客户端在网络端做一些工作，并在API端再次使用客户端来做数据获取。&#xA;这意味着你要避免运行任何 &amp;ldquo;yarn rw prisma migrate &amp;ldquo;命令，还要在部署时仔细检查你的构建命令，以确保Prisma不会重置你的数据库。&#xA;info&#xD;TLDR; Prisma目前不支持跨模式外键，所以由于你的Supabase public模式是如何引用auth.users的，反省模式失败。&#xA;这个例子提供了使用Supabase和RedwoodJS建立一个简单的用户管理应用程序的步骤（从头开始！）。它包括。&#xA;MemFire Cloud Database：一个用于存储用户数据的Postgres数据库。 MemFire Cloud Auth：用户可以用魔法链接登录（没有密码，只有电子邮件）。 MemFire Cloud Storage：用户可以上传照片。 Instant APIs。当你创建你的数据库表时，API将自动生成。 行级安全：数据受到保护，个人只能访问自己的数据。 在本指南结束时，你将拥有一个允许用户登录并更新一些基本资料细节的应用程序。&#xA;info&#xD;注意：对于RedwoodJS应用程序，端口将是8910。&#xA;GitHub link如果你在任何时候被卡住了，请看一下这个 repo。&#xA;关于RedwoodJS link一个Redwood应用程序被分成两部分：一个前端和一个后端。这表现为在一个单一的monorepo中的两个node项目。&#xA;前台项目被称为**web，后台项目被称为api**。 它们是独立的项目，因为 &amp;ldquo;web端 &amp;ldquo;的代码最终将在用户的浏览器中运行，而 api端的代码将在某个服务器上运行。&#xA;info&#xD;重要提示：当本指南提到 API时，指的是Supabase API，当它提到 api端时，指的是RedwoodJS api端。&#xA;**api端**是一个GraphQL API的实现。业务逻辑被组织成 服务，代表他们自己的内部API，可以从外部GraphQL请求和其他内部服务中调用。&#xA;网络端 &amp;ldquo;***是用React构建的。Redwood的路由器可以简单地将URL路径映射到React的 页面组件（并在每个路径上自动分割你的应用代码）。 页面可以包含一个 Layout组件来包装内容。它们还包含 单元格和常规的React组件。 单元允许你声明性地管理一个获取和显示数据的组件的生命周期。&#xA;info&#xD;为了与其他框架的Quickstart例子保持一致，我们将建立一个RedwoodJS，与正常情况下有点不同。 我们不使用Prisma来连接Supabase Postgres数据库或Prisma迁移，因为在Redwood应用中通常会这样做。 相反，我们将依靠Supabase客户端来完成**web方面的一些工作，并在api**方面再次使用客户端来进行数据获取。&#xA;项目设置 link在我们开始构建之前，我们要设置我们的数据库和API。这就像在Supabase中启动一个新项目一样简单 然后在数据库中创建一个 &amp;ldquo;模式&amp;rdquo;。&#xA;info&#xD;在设置Supabase时，你会与你的项目仪表板互动。然而，大多数RedwoodJS的设置步骤将与Redwood CLI互动，以生成路由、页面、组件等。 因此，请确保在你的项目目录中准备好一个终端。</description>
    </item>
    <item>
      <title>快速入门: SolidJS</title>
      <link>http://localhost:1313/docs/app/quickstart/with-solidjs/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      <guid>http://localhost:1313/docs/app/quickstart/with-solidjs/</guid>
      <description>GitHub link如果你在阅读指南时遇到困难，请参考此版本.&#xA;构建应用程序 link让我们开始从头开始构建SolidJS应用程序。&#xA;初始化一个SolidJS应用程序 link我们可以使用Degit来初始化一个名为supabase-solid的应用程序。&#xA;npx degit solidjs/templates/ts supabase-solid&#xD;cd supabase-solid&#xD;然后让我们安装唯一的额外依赖：supabase-js&#xA;npm install @supabase/supabase-js&#xD;最后，我们要把环境变量保存在.env中。 我们所需要的是API URL和你[早些时候]复制的anon密钥（#get-theapi-keys）。&#xA;VITE_SUPABASE_URL=YOUR_SUPABASE_URL&#xD;VITE_SUPABASE_ANON_KEY=YOUR_SUPABASE_ANON_KEY&#xD;现在我们已经有了API凭证，让我们创建一个辅助文件来初始化Supabase客户端。这些变量将被暴露在 在浏览器上，这完全没有问题，因为我们的数据库已经启用了行级安全。&#xA;import { createClient } from &amp;#39;@supabase/supabase-js&amp;#39;&#xD;const supabaseUrl = import.meta.env.VITE_SUPABASE_URL&#xD;const supabaseAnonKey = import.meta.env.VITE_SUPABASE_ANON_KEY&#xD;export const supabase = createClient(supabaseUrl, supabaseAnonKey)&#xD;还有一个可选的步骤是更新CSS文件src/index.css以使应用程序看起来漂亮。 你可以找到这个文件的全部内容这里&#xA;设置一个登录组件 link让我们设置一个 SolidJS 组件来管理登录和注册。我们将使用Magic Links，因此用户可以用他们的电子邮件登录，而无需使用密码。&#xA;import { createSignal } from &amp;#39;solid-js&amp;#39;&#xD;import { supabase } from &amp;#39;./supabaseClient&amp;#39;&#xD;export default function Auth() {&#xD;const [loading, setLoading] = createSignal(false)&#xD;const [email, setEmail] = createSignal(&amp;#39;&amp;#39;)&#xD;const handleLogin = async (e: SubmitEvent) =&amp;gt; {&#xD;e.</description>
    </item>
    <item>
      <title>快速入门: SvelteKit</title>
      <link>http://localhost:1313/docs/app/quickstart/with-sveltekit/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      <guid>http://localhost:1313/docs/app/quickstart/with-sveltekit/</guid>
      <description>GitHub link如果你在阅读指南时遇到困难，请参考此版本。&#xA;构建应用程序 link让我们从头开始构建Svelte应用程序。&#xA;初始化一个Svelte应用程序 link我们可以使用SvelteKit骨架项目来初始化 一个名为 supabase-sveltekit的应用程序（本教程中你不需要TypeScript、ESLint、Prettier或Playwright）。&#xA;npm init svelte@next supabase-sveltekit&#xD;cd supabase-sveltekit&#xD;npm install&#xD;然后让我们安装唯一的额外依赖：supabase-js&#xA;npm install @supabase/supabase-js&#xD;最后，我们要把环境变量保存在.env中。 我们所需要的是SUPABASE_URL和你[早些时候]复制的SUPABASE_KEY键(#get-the-api-keys)。&#xA;PUBLIC_SUPABASE_URL=&amp;#34;YOUR_SUPABASE_URL&amp;#34;&#xD;PUBLIC_SUPABASE_ANON_KEY=&amp;#34;YOUR_SUPABASE_KEY&amp;#34;&#xD;现在我们已经有了API凭证，让我们创建一个辅助文件来初始化Supabase客户端。这些变量将被暴露在 在浏览器上，这完全没有问题，因为我们的数据库已经启用了行级安全。&#xA;import { createClient } from &amp;#39;@supabase/auth-helpers-sveltekit&amp;#39;&#xD;import { env } from &amp;#39;$env/dynamic/public&amp;#39;&#xD;export const supabase = createClient(env.PUBLIC_SUPABASE_URL, env.PUBLIC_SUPABASE_ANON_KEY)&#xD;还有一个可选的步骤是更新CSS文件public/global.css以使应用程序看起来漂亮。 你可以找到这个文件的全部内容这里。&#xA;Supabase 认证帮助程序 linkSvelteKit是一个高度通用的框架，在构建时提供预渲染（SSG），在请求时提供服务器端渲染（SSR），API路由等。&#xA;在所有这些不同的环境中对你的用户进行认证是很有挑战性的，这就是为什么我们创建了Supabase Auth Helpers来使SvelteKit内的用户管理和数据获取尽可能简单。&#xA;安装SvelteKit的Auth助手。&#xA;npm install @supabase/auth-helpers-sveltekit&#xD;更新你的src/routes/+layout.svelte。&#xA;&amp;lt;script lang=&amp;#34;ts&amp;#34;&amp;gt;&#xD;import { supabase } from &amp;#39;$lib/supabaseClient&amp;#39;&#xD;import { invalidate } from &amp;#39;$app/navigation&amp;#39;&#xD;import { onMount } from &amp;#39;svelte&amp;#39;&#xD;import &amp;#39;.</description>
    </item>
  </channel>
</rss>
