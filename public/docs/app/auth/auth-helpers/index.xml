<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>认证帮助程序 on My New Hugo Site</title>
    <link>https://github.com/docs/app/auth/auth-helpers/</link>
    <description>Recent content in 认证帮助程序 on My New Hugo Site</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    <lastBuildDate>Wed, 13 Dec 2023 17:39:49 +0800</lastBuildDate>
    <atom:link href="https://github.com/docs/app/auth/auth-helpers/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>身份验证帮助程序</title>
      <link>https://github.com/docs/app/auth/auth-helpers/auth-helpers/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      <guid>https://github.com/docs/app/auth/auth-helpers/auth-helpers/</guid>
      <description>用于使用Supabase的特定于框架的Auth实用程序的集合。&#xA;Auth UI&#xA;Next.js&#xA;SvelteKit&#xA;Remix&#xA;状态 link身份验证助手处于测试状态。它们在当前状态下是可用的，但很可能会有突破性的变化。&#xA;其他链接 link 源代码 已知错误和问题 </description>
    </item>
    <item>
      <title>身份验证UI</title>
      <link>https://github.com/docs/app/auth/auth-helpers/auth-ui/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      <guid>https://github.com/docs/app/auth/auth-helpers/auth-ui/</guid>
      <description>Auth UI是用于验证用户的预构建React组件。 它支持定制主题和可扩展样式，以符合您的品牌和审美。&#xA;设置身份验证UI link安装最新版本的supabase js和Auth UI包：&#xA;npm install @supabase/supabase-js @supabase/auth-ui-react 导入Auth组件 link将 @supabase/supabase-js 中的 supabaseClient 作为属性传递给组件。&#xA;import { createClient } from &amp;#39;@supabase/supabase-js&amp;#39; import { Auth } from &amp;#39;@supabase/auth-ui-react&amp;#39; const supabase = createClient(&amp;#39;&amp;lt;INSERT PROJECT URL&amp;gt;&amp;#39;, &amp;#39;&amp;lt;INSERT PROJECT ANON API KEY&amp;gt;&amp;#39;) const App = () =&amp;gt; &amp;lt;Auth supabaseClient={supabase} /&amp;gt; 这将在没有任何样式的情况下渲染Auth组件。 我们建议使用预定义的主题之一来设置UI的样式。 导入要使用的主题并将其传递给appearence.theme属性。&#xA;import { Auth, // Import predefined theme ThemeSupa, } from &amp;#39;@supabase/auth-ui-react&amp;#39; const App = () =&amp;gt; ( &amp;lt;Auth supabaseClient={supabase} {/* Apply predefined theme */} appearance={{ theme: ThemeSupa }} /&amp;gt; ) 自定义 link有几种自定义身份验证UI的方法：</description>
    </item>
    <item>
      <title>使用Next.js进行Supabase认证</title>
      <link>https://github.com/docs/app/auth/auth-helpers/nextjs/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      <guid>https://github.com/docs/app/auth/auth-helpers/nextjs/</guid>
      <description>该子模块为在Next中实现用户身份验证提供了方便的帮助Next.js应用程序。&#xA;安装Next.js助手库 link npm Yarn npm install @supabase/auth-helpers-nextjs 此库支持以下工具版本：&#xA;Node.js: ^10.13.0 || &amp;gt;=12.0.0 Next.js: &amp;gt;=10 注：Next.js13除了新的app目录方法外，其他都受支持。我们正在努力增加对此的支持，您可以关注此处. 此外，为可在所有基于React的框架中使用的组件和挂钩安装React Auth Helpers。&#xA;npm install @supabase/auth-helpers-react yarn add @supabase/auth-helpers-nextjs 此库支持以下工具版本：&#xA;Node.js: ^10.13.0 || &amp;gt;=12.0.0 Next.js: &amp;gt;=10 注：Next.js13除了新的app目录方法外，其他都受支持。我们正在努力增加对此的支持，您可以关注此处. 此外，为可在所有基于React的框架中使用的组件和挂钩安装React Auth Helpers。&#xA;yarn add @supabase/auth-helpers-react 设置环境变量 link在项目的应用设置-&amp;gt;API中检索项目URL和匿名密钥以设置以下环境变量。对于本地开发，可以在.env.local文件。参见示例。&#xA;NEXT_PUBLIC_SUPABASE_URL=YOUR_SUPABASE_URL NEXT_PUBLIC_SUPABASE_ANON_KEY=YOUR_SUPABASE_ANON_KEY 基本设置 link JavaScript TypeScript 包装pages/_app.js组件与SessionContextProvider组件：&#xA;import { createBrowserSupabaseClient } from &amp;#39;@supabase/auth-helpers-nextjs&amp;#39; import { SessionContextProvider } from &amp;#39;@supabase/auth-helpers-react&amp;#39; function MyApp({ Component, pageProps }) { const router = useRouter() // Create a new supabase browser client on every first render.</description>
    </item>
    <item>
      <title>使用SveltKit进行Supabase认证</title>
      <link>https://github.com/docs/app/auth/auth-helpers/sveltekit/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      <guid>https://github.com/docs/app/auth/auth-helpers/sveltekit/</guid>
      <description>该子模块提供了在SvelteKit中实现用户身份验证的方便助手应用程序。&#xA;安装 link此库支持Node.js^16.15.0。&#xA;npm Yarn npm install @supabase/auth-helpers-sveltekit yarn add @supabase/auth-helpers-sveltekit 入门 link配置 link设置填充环境变量。对于本地开发，您可以将其设置为.env文件。参见示例.&#xA;# Find these in your Supabase project settings &amp;gt; API PUBLIC_SUPABASE_URL=https://your-project.supabase.co PUBLIC_SUPABASE_ANON_KEY=your-anon-key 设置Suabase客户端 link首先创建一个db.ts文件，并实例化 supabaseClient。&#xA;import { createClient } from &amp;#39;@supabase/auth-helpers-sveltekit&amp;#39; import { env } from &amp;#39;$env/dynamic/public&amp;#39; // or use the static env // import { PUBLIC_SUPABASE_URL, PUBLIC_SUPABASE_ANON_KEY } from &amp;#39;$env/static/public&amp;#39;; export const supabaseClient = createClient(env.PUBLIC_SUPABASE_URL, env.PUBLIC_SUPABASE_ANON_KEY) 要确保在服务器和客户端上初始化了客户端，请在src/hooks.server.js中包含此文件。js和src/hooks.client.js`：&#xA;import &amp;#39;$lib/db&amp;#39; 同步页面存储 link编辑+layout.svelte文件并设置客户端。&#xA;&amp;lt;script&amp;gt; import { supabaseClient } from &amp;#39;$lib/db&amp;#39; import { invalidate } from &amp;#39;$app/navigation&amp;#39; import { onMount } from &amp;#39;svelte&amp;#39; onMount(() =&amp;gt; { const { data: { subscription }, } = supabaseClient.</description>
    </item>
    <item>
      <title>Supabase Remix认证</title>
      <link>https://github.com/docs/app/auth/auth-helpers/remix/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      <guid>https://github.com/docs/app/auth/auth-helpers/remix/</guid>
      <description>该子模块为在Remix应用程序中实现用户身份验证提供了方便的帮助。&#xA;安装Remix助手库 link npm Yarn npm install @supabase/auth-helpers-remix 此库支持以下工具版本：&#xA;Remix: &amp;gt;=1.7.2 yarn add @supabase/auth-helpers-remix 此库支持以下工具版本：&#xA;Remix: &amp;gt;=1.7.2 设置环境变量 link在项目的应用设置-&amp;gt;API中检索项目URL和匿名密钥以设置以下环境变量。对于本地开发，您可以将其设置为.env文件。参见示例.&#xA;SUPABASE_URL=YOUR_SUPABASE_URL SUPABASE_ANON_KEY=YOUR_SUPABASE_ANON_KEY 加载器 link JavaScript TypeScript 加载器函数在组件呈现之前立即在服务器上运行。它们响应路由上的所有GET请求。您可以通过调用 createServerClient函数并将SUPABASE_URL、SUPABASE_ANON_KEY以及请求和响应传递给它，来创建经过身份验证的超级数据库客户端。&#xA;import { json } from &amp;#39;@remix-run/node&amp;#39; // change this import to whatever runtime you are using import { createServerClient } from &amp;#39;@supabase/auth-helpers-remix&amp;#39; export const loader = async ({ request }) =&amp;gt; { const response = new Response() // an empty response is required for the auth helpers // to set cookies to manage auth const supabaseClient = createServerClient( process.</description>
    </item>
  </channel>
</rss>
