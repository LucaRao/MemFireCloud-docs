<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>身份验证 on MemFire Cloud在线文档</title>
    <link>https://docs.memfiredb.com/docs/app/auth/authentication/</link>
    <description>Recent content in 身份验证 on MemFire Cloud在线文档</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    <lastBuildDate>Wed, 13 Dec 2023 17:39:49 +0800</lastBuildDate>
    <atom:link href="https://docs.memfiredb.com/docs/app/auth/authentication/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>使用电子邮件登录</title>
      <link>https://docs.memfiredb.com/docs/app/auth/authentication/auth-email/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      <guid>https://docs.memfiredb.com/docs/app/auth/authentication/auth-email/</guid>
      <description>概述 link为 MemFireCloud 应用程序设置电子邮件登录。&#xA;将电子邮件验证器添加到MemFire Cloud项目 将登录代码添加到应用程序 - JavaScript | Flutter 配置电子邮件设置 link 对于 网站 URL（用户认证-&amp;gt; URL 配置）, 输入应用程序的最终（托管）URL。 对于 身份验证服务商（用户认证-&amp;gt; 服务商）, 启用电子邮件提供程序. info&#xD;对于自托管，可以使用提供的文件和环境变量更新项目配置。 有关详细信息，请参阅自托管文档。&#xA;将登录代码添加到客户端应用程序 link&#xD;JavaScript&#xD;Dart&#xD;当用户登录时，使用其电子邮件地址和密码调用signInWithPassword()：&#xA;async function signInWithEmail() {&#xD;const { data, error } = await supabase.auth.signInWithPassword({&#xD;email: &amp;#39;example@email.com&amp;#39;,&#xD;password: &amp;#39;example-password&amp;#39;,&#xD;})&#xD;}&#xD;当用户登录时，使用其电子邮件地址和密码调用signInWithPassword()：&#xA;Future&amp;lt;void&amp;gt; signInWithEmail() async {&#xD;final AuthResponse res = await supabase.auth.signInWithPassword(&#xD;email: &amp;#39;example@email.com&amp;#39;,&#xD;password: &amp;#39;example-password&amp;#39;&#xD;);&#xD;}&#xD;JavaScript&#xD;Dart&#xD;当用户注销时，调用signOut()将其从浏览器会话和localStorage中删除：&#xA;async function signOut() {&#xD;const { error } = await supabase.</description>
    </item>
    <item>
      <title>手机登录认证</title>
      <link>https://docs.memfiredb.com/docs/app/auth/authentication/phoneauth/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      <guid>https://docs.memfiredb.com/docs/app/auth/authentication/phoneauth/</guid>
      <description>前言 link为了顺应国内用户的使用习惯，MemFire Cloud提供了手机号码验证的登录方式，可以兼容国内的阿里云服务商，用户可以采用手机号+短信的放式进行用户身份认证。&#xA;使用步骤 link1.开启手机验证 link进入“用户认证”-&amp;gt;“服务商”页面，启用手机号码验证，短信（SMS）服务商选择“阿里云”，依次填写好阿里云配置后点击保存。&#xA;当启用“短信验证”时，说明您需要发送短信验证码来进行手机认证，您需要填写正确的阿里云短信签名名称和短信模板CODE&#xA;2.示例教程 linkMemFire Cloud 提供两种手机登录认证方式，分别如下：&#xA;① 手机号+验证码登录认证 link用户使用手机号获取验证码。&#xA;SDK的使用教程&#xA;//获取验证码&#xD;async function getQRcode(){&#xD;let { data, error } = await _supabase.auth.signInWithOtp({&#xD;phone: phone,&#xD;})&#xD;if(error){&#xD;alert(error)&#xD;}&#xD;alert(&amp;#39;短信已发送至您的手机中，请注意查收。&amp;#39;)&#xD;}&#xD;//登录&#xD;async function sigin(){&#xD;let { data, error } = await _supabase.auth.verifyOtp({&#xD;phone: phone,&#xD;token: QRcode,&#xD;type: &amp;#39;sms&amp;#39;,&#xD;})&#xD;if(error){&#xD;alert(error)&#xD;return;&#xD;}&#xD;alert(&amp;#39;登录成功！&amp;#39;) }&#xD;② 手机号+密码+验证码认证 link图示 link先用手机号+密码获取验证码进行注册&#xA;随后会在用户列表里刚刚那条等待验证的用户信息&#xA;输入验证码，点击注册，会发现用户列表的用户已经认证成功。&#xA;SDK的使用教程&#xA;1.用户使用手机号+密码先来获取验证码进行注册。&#xA;//获取验证码（注册）&#xD;async function getQRcode(){&#xD;let { data, error } = await _supabase.</description>
    </item>
    <item>
      <title>微信小程序登录认证</title>
      <link>https://docs.memfiredb.com/docs/app/auth/authentication/wechatauth/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      <guid>https://docs.memfiredb.com/docs/app/auth/authentication/wechatauth/</guid>
      <description>前言 link为了顺应国内用户的使用习惯，MemFire Cloud 的SDK推出了微信可以在不同应用场景下的登录方式，以下两种场景是MemFire Cloud 推荐的微信登录方式，我们以简单的小示例来做示范，具体的实现还需要根据业务自身的场景来判断。&#xA;① 微信用户授权登录 link首次进入小程序，点击登录后会立即跳转个人中心页进行个人资料的修改，或者可以点击个人中心页面进行个人资料的修改&#xA;前提条件：&#xA;在MemFire Cloud认证服务商页面启用微信小程序认证 图例&#xA;首页代码示例：&#xA;html&#xA;&amp;lt;button style=&amp;#34;border-radius: 100rpx;margin-top: 300rpx;&amp;#34; type=&amp;#34;primary&amp;#34; bindtap=&amp;#34;login&amp;#34;&amp;gt;微信快速登录&amp;lt;/button&amp;gt;&#xD;SDK使用教程&#xA;signInWithWechat接口接受一个wx.login返回的code参数，通过code兑换openid等信息，并判断用户是否存在，不存在则自动创建&#xA;// pages/main/index.ts&#xD;import { supabase } from &amp;#39;../../lib/supabase&amp;#39;&#xD;Page({&#xD;data: {&#xD;},&#xD;login(){&#xD;wx.login({&#xD;success: async res =&amp;gt; {&#xD;const { data, error } = await supabase.auth.signInWithWechat({code:res.code})&#xD;if(error){&#xD;wx.showToast({&#xD;title: error?.error || error?.msg,&#xD;icon: &amp;#34;none&amp;#34;,&#xD;duration: 2000&#xD;})&#xD;}else if(data){&#xD;setTimeout(() =&amp;gt; {&#xD;wx.showModal({&#xD;title: &amp;#39;提示&amp;#39;,&#xD;content: &amp;#39;登录成功！去填充个人资料吧！&amp;#39;,&#xD;success (res) {&#xD;if (res.</description>
    </item>
    <item>
      <title>使用Magic Link登录</title>
      <link>https://docs.memfiredb.com/docs/app/auth/authentication/auth-magic-link/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      <guid>https://docs.memfiredb.com/docs/app/auth/authentication/auth-magic-link/</guid>
      <description>Magic Link是一种无密码登录的形式，用户单击发送到其电子邮件地址的链接即可登录其帐户。 Magic Link仅适用于电子邮件地址。默认情况下，用户只能每60秒请求一次Magic Link。&#xA;概述 link为MemfireCloud应用程序提供Magic Link登录。&#xA;将登录代码添加到应用程序 - JavaScript | Flutter 将Magic Link添加到您的 MemfireCloud 项目中 link 对于 网站 URL（用户认证-&amp;gt; URL 配置）, 输入应用程序的最终（托管）URL。 对于 身份验证服务商（用户认证-&amp;gt; 服务商）, 启用电子邮件提供程序. 将登录代码添加到客户端应用程序 link&#xD;JavaScript&#xD;Dart&#xD;当您的用户登录时，使用其电子邮件地址调用signInWithOtp():&#xA;async function signInWithEmail() {&#xD;const { data, error } = await supabase.auth.signInWithOtp({&#xD;email: &amp;#39;example@email.com&amp;#39;,&#xD;})&#xD;}&#xD;当您的用户登录时，使用其电子邮件地址调用signIn():&#xA;Future&amp;lt;void&amp;gt; signInWithEmail() async {&#xD;final AuthResponse res = await supabase.auth.signinwithotp(email: &amp;#39;example@email.com&amp;#39;);&#xD;}&#xD;JavaScript&#xD;Dart&#xD;当用户注销时，调用signOut()将其从浏览器会话和localStorage中删除:&#xA;async function signOut() {&#xD;const { error } = await supabase.</description>
    </item>
    <item>
      <title>使用Apple登录</title>
      <link>https://docs.memfiredb.com/docs/app/auth/authentication/auth-apple/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      <guid>https://docs.memfiredb.com/docs/app/auth/authentication/auth-apple/</guid>
      <description>要为项目启用Apple Auth，您需要设置Apple OAuth应用程序，并将应用程序凭据添加到MemFire Cloud项目仪表板。&#xA;概述 linkApple OAuth包括六大步骤：&#xA;获取具有 使用Apple登录 功能的 App Id。 获取Services Id - 这将用作 client_id。 获取用于获取 client_secret的secret key。 使用 secret key生成client_secret。 将您的 client id和 client secret 密钥添加到MemFire Clpud Project。 将登录代码添加到JS客户端应用程序。 访问您的Apple Developer帐户 link 进入developer.apple.com. 点击右上方的 账户来登录。 获取应用程序ID link 跳转到Certificates, Identifiers &amp;amp; Profiles文件. 单击左侧的Identifiers。 单击左上角Identifiers旁边的+符号。 选择 App IDs并单击 继续。 选择 App 类型，然后单击继续。 填写应用程序信息： 应用程序描述。 绑定ID (苹果推荐反向域名风格，所以如果你的域名是acme.com，而您的应用程序称为roadrunner，请使用：com.acme.roadrunner)。 向下滚动并选中使用Apple登录。 单击右上角的继续。 单击右上角的注册。 获取服务ID link当您进行API调用以验证用户时，这将用作client_id。&#xA;跳转到Certificates, Identifiers &amp;amp; Profiles文件. 单击左侧的Identifiers。 单击左上角Identifiers旁边的+符号。 选择 Services IDs 并单击“继续”。 填写应用程序信息： 应用程序描述。 绑定ID (您不能使用上一步中的同一绑定的ID，但可以在开头添加一些内容，例如app.</description>
    </item>
    <item>
      <title>使用GitHub登录</title>
      <link>https://docs.memfiredb.com/docs/app/auth/authentication/auth-github/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      <guid>https://docs.memfiredb.com/docs/app/auth/authentication/auth-github/</guid>
      <description>要为项目启用GitHub Auth，您需要设置一个GitHub OAuth应用程序，并将应用程序凭据添加到Supabase Dashboard。&#xA;概述 link为应用程序设置GitHub登录由三部分组成:&#xA;在GitHub上创建和配置GitHub OAuth应用程序 将GitHub OAuth密钥添加到MemFire Cloud项目 将登录代码添加到JS客户端应用程序 访问您的GitHub帐户 link 进入 github.com. 单击右上角的登录以登录。 创建GitHub Oauth应用程序 link转到GitHub开发者设置页面:&#xA;单击右上方的个人资料照片 单击菜单底部附近的设置 在左侧边栏中，单击开发人员设置（靠近底部） 在左侧边栏中，单击OAuth Apps 查找回调URL link下一步需要回调URL，如下所示：&#xA;https://&amp;lt;project-ref&amp;gt;.supabase.co/auth/v1/callback&#xA;转到MemFire Cloud项目仪表板. 单击左侧边栏底部的设置图标。 单击列表中的API。 在Config/URL下，您将找到您的API URL，您可以单击复制将其复制到剪贴板。 现在只需在末尾添加/auth/v1/callback即可获得完整的OAuth重定向URI。 注册新的OAuth应用程序 link 单击注册新应用程序。如果您以前创建过应用程序，请单击此处的新建OAuth应用程序。 在应用程序名称中，键入应用程序的名称。 在主页URL中，键入应用程序网站的完整URL。 在授权回调URL中，键入应用的回调URL。 在有效OAuth重定向URI框中输入URL。 单击右下角的保存更改。 单击注册应用程序。 复制新的OAuth凭据&#xA;复制并保存客户端ID。 单击生成新客户端密钥。 复制并保存客户端密码。 将您的GitHub凭据输入到Supabase项目中 link 转到MemFire Cloud项目仪表板 在左侧边栏中，单击身份验证图标（靠近顶部） 单击列表中的设置以转到身份验证设置页面 在站点URL下输入应用程序的最终（托管）URL（这很重要） 在外部OAuth提供程序下，将已启用GitHub设置为ON 输入上一步中保存的GitHub客户端ID 和GitHubClient Secret 单击保存 将登录代码添加到客户端应用程序 link当您的用户登录时,调用signInWithOAuth(),将github作为provider:&#xA;async function signInWithGitHub() {&#xD;const { data, error } = await supabase.</description>
    </item>
    <item>
      <title>使用GitLab登录</title>
      <link>https://docs.memfiredb.com/docs/app/auth/authentication/auth-gitlab/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      <guid>https://docs.memfiredb.com/docs/app/auth/authentication/auth-gitlab/</guid>
      <description>要为项目启用GitLab Auth，您需要设置一个GitLab OAuth应用程序，并将应用程序凭据添加到Supabase Dashboard。&#xA;概述 link为应用程序设置GitLab登录由三部分组成：&#xA;在GitLab上创建和配置GitLab应用程序 将GitLab应用程序密钥添加到MemFire Cloud项目 将登录代码添加到JS客户端应用程序 访问您的GitLab帐户 link 进入 gitlab.com. 单击右上角的登录以登录。 查找回调URL link下一步需要回调URL，如下所示：&#xA;https://&amp;lt;project-ref&amp;gt;.supabase.co/auth/v1/callback&#xA;转到MemFire Cloud项目仪表板. 单击左侧边栏底部的设置图标。 单击列表中的API。 在Config/URL下，您将找到您的API URL，您可以单击复制将其复制到剪贴板。 现在只需在末尾添加/auth/v1/callback即可获得完整的OAuth重定向URI。 创建GitLab应用程序 link 单击右上角的个人资料徽标（头像）。 选择编辑配置文件。 在左侧边栏中，选择应用程序。 输入应用程序的名称。 在重定向URI框中，键入应用程序的回调URL。 选中机密旁边的复选框（确保选中）。 检查名为read_user的作用域（这是唯一需要的作用域）。 单击底部的保存应用程序。 复制并保存您稍后需要的应用程序ID（client_ID）和机密（client _Secret）。 将您的GitLab凭据添加到Suabase项目中 link 转到MemFire Cloud项目仪表板. 在左侧边栏中，单击身份验证图标（靠近顶部）。 单击列表中的设置以转到身份验证设置页面。 在站点URL下输入应用程序的最终（托管）URL（这很重要）。 在外部OAuth提供程序下，将GitLab Enabled设置为ON。 输入上一步中保存的client_id和client_secret。 单击保存。 将登录代码添加到客户端应用程序 link当您的用户登录时，调用signInWithOAuth()，并将gitlab作为provider：&#xA;async function signInWithGitLab() {&#xD;const { data, error } = await supabase.auth.signInWithOAuth({&#xD;provider: &amp;#39;gitlab&amp;#39;,&#xD;})&#xD;}&#xD;当用户注销时，调用signOut()将其从浏览器会话和localStorage中删除：&#xA;async function signout() {&#xD;const { error } = await supabase.</description>
    </item>
    <item>
      <title>电子邮件模板</title>
      <link>https://docs.memfiredb.com/docs/app/auth/authentication/auth-email-templates/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      <guid>https://docs.memfiredb.com/docs/app/auth/authentication/auth-email-templates/</guid>
      <description>您可以自定义用于身份验证流的电子邮件。您可以编辑以下电子邮件模板：&#xA;确认注册 邀请用户 Magic Link 更改邮箱地址 重置密码 术语 link模板系统提供以下变量供使用： 名称 描述 {{ .ConfirmationURL }} 包含确认 URL。例如，注册确认 URL 如下所示：https://project-ref.supabase.co/auth/v1/verify?token={{ 。TokenHash }}&amp;amp;type=signup&amp;amp;redirect_to=https：//example.com/path 。 {{ .Token }} 包含一个 6 位数的一次性密码 （OTP），可用于代替 {{.ConfirmationURL }} 中。 {{ .TokenHash }} 包含 {{ .Token }}。这对于在电子邮件模板中构建您自己的电子邮件链接非常有用。 {{ .SiteURL }} 包含应用程序的站点 URL。这可以在项目的身份验证设置中进行配置。 {{ .RedirectTo }} 包含在调用 signUp、signInWithOtp、signInWithOAuth、resetPasswordForEmail 或 inviteUserByEmail 时传递的重定向 URL。可以在项目的身份验证设置中配置重定向 URL 允许列表。 {{ .Data }} 包含来自auth.users.user_metadata的元数据。使用它来个性化电子邮件。 局限性 link电子邮件预取 link某些电子邮件提供商可能具有垃圾邮件检测或其他安全功能，可预提取传入电子邮件中的 URL 链接（例如，Microsoft Defender for Office 365 中的安全链接）。 在此方案中，发送的 {{ .</description>
    </item>
  </channel>
</rss>
