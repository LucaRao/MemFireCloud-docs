<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>数据库 on My New Hugo Site</title>
    <link>https://github.com/docs/app/sdkdocs/wechatsdk/database/</link>
    <description>Recent content in 数据库 on My New Hugo Site</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    <lastBuildDate>Wed, 13 Dec 2023 17:39:49 +0800</lastBuildDate>
    <atom:link href="https://github.com/docs/app/sdkdocs/wechatsdk/database/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>Select 查询</title>
      <link>https://github.com/docs/app/sdkdocs/wechatsdk/database/select/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      <guid>https://github.com/docs/app/sdkdocs/wechatsdk/database/select/</guid>
      <description>在表(table)或视图(view)上执行 SELECT 查询。&#xA;默认情况下，Supabase项目返回最多1,000行数据。你可以在项目的API设置中更改此设置。建议将其保持较低，以限制意外或恶意请求的负载大小。你可以使用range()查询来对数据进行分页处理。 select()可以与过滤器(Filters)组合使用，用于过滤数据。 select()可以与修饰器(Modifiers)组合使用，用于对数据进行修改。 如果你使用Supabase平台，apikey是一个保留关键字，应避免将其用作列名。 案例教程 link案例1 (获取数据) link&#xD;建表&#xD;使用方法&#xD;返回结果&#xD;&gt;&#xD;create table&#xD;countries (id int8 primary key, name text);&#xD;insert into&#xD;countries (id, name)&#xD;values&#xD;(1, &amp;#39;Afghanistan&amp;#39;),&#xD;(2, &amp;#39;Albania&amp;#39;),&#xD;(3, &amp;#39;Algeria&amp;#39;);&#xD;const { data, error } = await supabase&#xD;.from(&amp;#39;countries&amp;#39;)&#xD;.select()&#xD;{&#xD;&amp;#34;data&amp;#34;: [&#xD;{&#xD;&amp;#34;id&amp;#34;: 1,&#xD;&amp;#34;name&amp;#34;: &amp;#34;Afghanistan&amp;#34;&#xD;},&#xD;{&#xD;&amp;#34;id&amp;#34;: 2,&#xD;&amp;#34;name&amp;#34;: &amp;#34;Albania&amp;#34;&#xD;},&#xD;{&#xD;&amp;#34;id&amp;#34;: 3,&#xD;&amp;#34;name&amp;#34;: &amp;#34;Algeria&amp;#34;&#xD;}&#xD;],&#xD;&amp;#34;status&amp;#34;: 200,&#xD;&amp;#34;statusText&amp;#34;: &amp;#34;OK&amp;#34;&#xD;}&#xD;案例2 (选择特定列) link&#xD;建表&#xD;使用方法&#xD;返回结果&#xD;&gt;&#xD;create table&#xD;countries (id int8 primary key, name text);&#xD;insert into&#xD;countries (id, name)&#xD;values&#xD;(1, &amp;#39;Afghanistan&amp;#39;),&#xD;(2, &amp;#39;Albania&amp;#39;),&#xD;(3, &amp;#39;Algeria&amp;#39;);&#xD;const { data, error } = await supabase&#xD;.</description>
    </item>
    <item>
      <title>Insert 数据</title>
      <link>https://github.com/docs/app/sdkdocs/wechatsdk/database/insert/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      <guid>https://github.com/docs/app/sdkdocs/wechatsdk/database/insert/</guid>
      <description>在表（table）或视图（view）执行 INSERT 操作。&#xA;案例教程 link案例1 （创建一个记录） link&#xD;建表&#xD;使用方法&#xD;返回结果&#xD;create table&#xD;countries (id int8 primary key, name text);&#xD;const { error } = await supabase&#xD;.from(&amp;#39;countries&amp;#39;)&#xD;.insert({ id: 1, name: &amp;#39;Denmark&amp;#39; })&#xD;{&#xD;&amp;#34;status&amp;#34;: 201,&#xD;&amp;#34;statusText&amp;#34;: &amp;#34;Created&amp;#34;&#xD;}&#xD;案例2 （创建一个记录并返回） link&#xD;建表&#xD;使用方法&#xD;返回结果&#xD;create table&#xD;countries (id int8 primary key, name text);&#xD;const { data, error } = await supabase&#xD;.from(&amp;#39;countries&amp;#39;)&#xD;.insert({ id: 1, name: &amp;#39;Denmark&amp;#39; })&#xD;.select()&#xD;{&#xD;&amp;#34;data&amp;#34;: [&#xD;{&#xD;&amp;#34;id&amp;#34;: 1,&#xD;&amp;#34;name&amp;#34;: &amp;#34;Denmark&amp;#34;&#xD;}&#xD;],&#xD;&amp;#34;status&amp;#34;: 201,&#xD;&amp;#34;statusText&amp;#34;: &amp;#34;Created&amp;#34;&#xD;}&#xD;案例3 （批量创建） link&#xD;建表&#xD;使用方法&#xD;返回结果&#xD;注意事项&#xD;create table&#xD;countries (id int8 primary key, name text);&#xD;const { error } = await supabase&#xD;.</description>
    </item>
    <item>
      <title>Delete 数据</title>
      <link>https://github.com/docs/app/sdkdocs/wechatsdk/database/delete/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      <guid>https://github.com/docs/app/sdkdocs/wechatsdk/database/delete/</guid>
      <description>delete()用于在表（table）或视图（view）执行 DELETE 操作。&#xA;delete() 应始终与过滤器（filter）结合使用，以便定位要删除的项。 如果你在使用 delete() 时带有过滤器，并且启用了RLS（行级安全性），则只会删除通过 SELECT 策略可见的行。请注意，默认情况下没有行可见，因此你需要至少有一个 SELECT/ALL 策略来使行可见。 案例教程 link案例1 （删除记录） link&#xD;建表&#xD;使用方法&#xD;返回结果&#xD;create table&#xD;countries (id int8 primary key, name text);&#xD;insert into&#xD;countries (id, name)&#xD;values&#xD;(1, &amp;#39;Spain&amp;#39;);&#xD;const { error } = await supabase&#xD;.from(&amp;#39;countries&amp;#39;)&#xD;.delete()&#xD;.eq(&amp;#39;id&amp;#39;, 1)&#xD;{&#xD;&amp;#34;status&amp;#34;: 204,&#xD;&amp;#34;statusText&amp;#34;: &amp;#34;No Content&amp;#34;&#xD;}&#xD;参数说明 link&#xD;选项（option）&#xD;[必要参数]&#xD;object类型&#xD;命名的参数&#xA;特性&#xD;count&#xD;optional&#xD;exact | planned | estimated&#xD;用来计算更新行的计数算法。&#xA;exact:可以精确计算行数，但执行速度较慢。执行 &amp;ldquo;COUNT(*)&amp;ldquo;操作。</description>
    </item>
    <item>
      <title>Update 数据</title>
      <link>https://github.com/docs/app/sdkdocs/wechatsdk/database/update/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      <guid>https://github.com/docs/app/sdkdocs/wechatsdk/database/update/</guid>
      <description>在表（table）或视图（view）执行 UPDATE 更新数据操作。&#xA;update() 应该始终与筛选器 (Filters) 结合使用，以便定位您希望更新的项目。 案例教程 link案例1 （更新数据） link&#xD;建表&#xD;使用方法&#xD;返回结果&#xD;create table&#xD;countries (id int8 primary key, name text);&#xD;insert into&#xD;countries (id, name)&#xD;values&#xD;(1, &amp;#39;Taiwan&amp;#39;);&#xD;const { error } = await supabase&#xD;.from(&amp;#39;countries&amp;#39;)&#xD;.update({ name: &amp;#39;Australia&amp;#39; })&#xD;.eq(&amp;#39;id&amp;#39;, 1)&#xD;{&#xD;&amp;#34;status&amp;#34;: 204,&#xD;&amp;#34;statusText&amp;#34;: &amp;#34;No Content&amp;#34;&#xD;}&#xD;案例2 （更新一个记录并返回） link&#xD;建表&#xD;使用方法&#xD;返回结果&#xD;create table&#xD;countries (id int8 primary key, name text);&#xD;insert into&#xD;countries (id, name)&#xD;values&#xD;(1, &amp;#39;Singapore&amp;#39;);&#xD;const { data, error } = await supabase&#xD;.</description>
    </item>
    <item>
      <title>Upsert 数据</title>
      <link>https://github.com/docs/app/sdkdocs/wechatsdk/database/upsert/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      <guid>https://github.com/docs/app/sdkdocs/wechatsdk/database/upsert/</guid>
      <description>upsert()用于对表（table）或视图（view）执行 UPSERT 操作。&#xA;在关系型数据库中，Upsert是一种结合了&amp;quot;插入（Insert）&amp;ldquo;和&amp;quot;更新（Update）&amp;ldquo;的操作,它允许我们在表或视图上执行插入或更新操作。 通常情况下，当我们想要向数据库中插入一行数据时，我们会使用INSERT语句。 但是，如果该行数据已经存在（通常通过主键来判断），我们可能希望更新该行数据而不是插入重复的数据。&#xA;Upsert通过传递列到onConflict方法，我们可以使用.upsert()来实现以下功能：&#xA;如果不存在具有相应onConflict列的行，则执行等效于.insert()的插入操作。 如果存在具有相应onConflict列的行，则根据ignoreDuplicates的设置执行另一种操作。 需要注意的是，为了使用upsert，必须在values中包含主键。主键是用于唯一标识表中每一行的一列或一组列，确保数据的唯一性和完整性。&#xA;案例教程 link案例1 （Upsert数据） link&#xD;建表&#xD;使用方法&#xD;返回结果&#xD;create table&#xD;countries (id int8 primary key, name text);&#xD;insert into&#xD;countries (id, name)&#xD;values&#xD;(1, &amp;#39;Afghanistan&amp;#39;);&#xD;const { data, error } = await supabase&#xD;.from(&amp;#39;countries&amp;#39;)&#xD;.upsert({ id: 1, name: &amp;#39;Albania&amp;#39; })&#xD;.select()&#xD;{&#xD;&amp;#34;data&amp;#34;: [&#xD;{&#xD;&amp;#34;id&amp;#34;: 1,&#xD;&amp;#34;name&amp;#34;: &amp;#34;Albania&amp;#34;&#xD;}&#xD;],&#xD;&amp;#34;status&amp;#34;: 201,&#xD;&amp;#34;statusText&amp;#34;: &amp;#34;Created&amp;#34;&#xD;}&#xD;案例2 （批量Upsert数据） link&#xD;建表&#xD;使用方法&#xD;返回结果&#xD;create table&#xD;countries (id int8 primary key, name text);&#xD;insert into&#xD;countries (id, name)&#xD;values&#xD;(1, &amp;#39;Afghanistan&amp;#39;);&#xD;const { data, error } = await supabase&#xD;.</description>
    </item>
    <item>
      <title>使用过滤器</title>
      <link>https://github.com/docs/app/sdkdocs/wechatsdk/database/using-filters/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      <guid>https://github.com/docs/app/sdkdocs/wechatsdk/database/using-filters/</guid>
      <description>过滤器允许你只返回符合某些条件的记录。&#xA;过滤器可以用于select(), update(), upsert(), 和delete()查询。&#xA;如果一个Postgres函数返回一个表的响应，你也可以应用过滤器。&#xA;案例1 （应用过滤器） link&#xD;使用方法&#xD;注意事项&#xD;const { data, error } = await supabase&#xD;.from(&amp;#39;cities&amp;#39;)&#xD;.select(&amp;#39;name, country_id&amp;#39;)&#xD;.eq(&amp;#39;name&amp;#39;, &amp;#39;The Shire&amp;#39;) // Correct&#xD;const { data, error } = await supabase&#xD;.from(&amp;#39;cities&amp;#39;)&#xD;.eq(&amp;#39;name&amp;#39;, &amp;#39;The Shire&amp;#39;) // Incorrect&#xD;.select(&amp;#39;name, country_id&amp;#39;)&#xD;过滤器必须在select(), update()、upsert()、delete()和rpc()之后，并在修改器之前应用。&#xA;案例2 （链式） link&#xD;使用方法&#xD;注意事项&#xD;const { data, error } = await supabase&#xD;.from(&amp;#39;cities&amp;#39;)&#xD;.select(&amp;#39;name, country_id&amp;#39;)&#xD;.gte(&amp;#39;population&amp;#39;, 1000)&#xD;.lt(&amp;#39;population&amp;#39;, 10000)&#xD;过滤器可以串联起来，产生高级查询。例如。 来查询人口在1,000和10,000之间的城市。&#xA;案例3 （条件链式） link&#xD;使用方法&#xD;注意事项&#xD;const filterByName = null&#xD;const filterPopLow = 1000&#xD;const filterPopHigh = 10000&#xD;let query = supabase&#xD;.</description>
    </item>
    <item>
      <title>使用修改器</title>
      <link>https://github.com/docs/app/sdkdocs/wechatsdk/database/using-modifiers/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      <guid>https://github.com/docs/app/sdkdocs/wechatsdk/database/using-modifiers/</guid>
      <description>过滤器是在行的层面上工作的&amp;ndash;它们允许你在不改变行的形状的情况下，返回只符合特定条件的行。 只符合某些条件的行，而不改变行的形状。修改器是不符合该定义的一切，允许你改变响应的格式（例如，返回一个CSV字符串）。&#xA;修改器必须在过滤器之后指定。有些修改器只适用于一些修改器只适用于返回行的查询（例如，select()或rpc()在一个返回表的函数上返回表格响应的函数）。</description>
    </item>
    <item>
      <title>containedBy()</title>
      <link>https://github.com/docs/app/sdkdocs/wechatsdk/database/containedby/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      <guid>https://github.com/docs/app/sdkdocs/wechatsdk/database/containedby/</guid>
      <description>该方法仅用于在 jsonb、数组（array）和范围（range）列上进行过滤&#xA;contains()的作用是匹配那些其中每个元素都被包含在指定的值中的行。&#xA;换句话说，在指定列中，给定的数组（array）是匹配出来的记录值的子集&#xA;也就是说，在指定列中，匹配出来的记录的值包含了给定的数组（array）的所有元素。&#xA;案例教程 link案例1 （关于数组列） link&#xD;建表&#xD;使用方法&#xD;返回结果&#xD;create table&#xD;classes (&#xD;id int8 primary key,&#xD;name text,&#xD;days text[]&#xD;);&#xD;insert into&#xD;classes (id, name, days)&#xD;values&#xD;(1, &amp;#39;Chemistry&amp;#39;, array[&amp;#39;monday&amp;#39;, &amp;#39;friday&amp;#39;]),&#xD;(2, &amp;#39;History&amp;#39;, array[&amp;#39;monday&amp;#39;, &amp;#39;wednesday&amp;#39;, &amp;#39;thursday&amp;#39;]);&#xD;const { data, error } = await supabase&#xD;.from(&amp;#39;classes&amp;#39;)&#xD;.select(&amp;#39;name&amp;#39;)&#xD;.containedBy(&amp;#39;days&amp;#39;, [&amp;#39;monday&amp;#39;, &amp;#39;tuesday&amp;#39;, &amp;#39;wednesday&amp;#39;, &amp;#39;friday&amp;#39;])&#xD;{&#xD;&amp;#34;data&amp;#34;: [&#xD;{&#xD;&amp;#34;name&amp;#34;: &amp;#34;Chemistry&amp;#34;&#xD;}&#xD;],&#xD;&amp;#34;status&amp;#34;: 200,&#xD;&amp;#34;statusText&amp;#34;: &amp;#34;OK&amp;#34;&#xD;}&#xD;案例2 （关于范围列） link&#xD;建表&#xD;使用方法&#xD;返回结果&#xD;注意事项&#xD;create table&#xD;reservations (&#xD;id int8 primary key,&#xD;room_name text,&#xD;during tsrange&#xD;);&#xD;insert into&#xD;reservations (id, room_name, during)&#xD;values&#xD;(1, &amp;#39;Emerald&amp;#39;, &amp;#39;[2000-01-01 13:00, 2000-01-01 15:00)&amp;#39;),&#xD;(2, &amp;#39;Topaz&amp;#39;, &amp;#39;[2000-01-02 09:00, 2000-01-02 10:00)&amp;#39;);&#xD;const { data, error } = await supabase&#xD;.</description>
    </item>
    <item>
      <title>contains()</title>
      <link>https://github.com/docs/app/sdkdocs/wechatsdk/database/contains/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      <guid>https://github.com/docs/app/sdkdocs/wechatsdk/database/contains/</guid>
      <description>该方法仅用于在 jsonb、数组（array）和范围（range）列上进行过滤&#xA;contains()的作用是匹配包含指定元素的行。&#xA;换句话说，在指定列中，匹配出来的记录的值是给定数组（array）的子集。&#xA;也就是说，在指定列中，给定的数组（array）包含了匹配出记录的所有元素。&#xA;案例教程 link案例1 （关于数组列） link&#xD;建表&#xD;使用方法&#xD;返回结果&#xD;create table&#xD;issues (&#xD;id int8 primary key,&#xD;title text,&#xD;tags text[]&#xD;);&#xD;insert into&#xD;issues (id, title, tags)&#xD;values&#xD;(1, &amp;#39;Cache invalidation is not working&amp;#39;, array[&amp;#39;is:open&amp;#39;, &amp;#39;severity:high&amp;#39;, &amp;#39;priority:low&amp;#39;]),&#xD;(2, &amp;#39;Use better names&amp;#39;, array[&amp;#39;is:open&amp;#39;, &amp;#39;severity:low&amp;#39;, &amp;#39;priority:medium&amp;#39;]);&#xD;const { data, error } = await supabase&#xD;.from(&amp;#39;users&amp;#39;)&#xD;.select()&#xD;.contains(&amp;#39;tags&amp;#39;, [&amp;#39;is:open&amp;#39;, &amp;#39;severity:high&amp;#39;, &amp;#39;priority:low&amp;#39;]); {&#xD;&amp;#34;data&amp;#34;: [&#xD;{&#xD;&amp;#34;title&amp;#34;: &amp;#34;Cache invalidation is not working&amp;#34;&#xD;}&#xD;],&#xD;&amp;#34;status&amp;#34;: 200,&#xD;&amp;#34;statusText&amp;#34;: &amp;#34;OK&amp;#34;&#xD;}&#xD;案例2 （关于范围列） link&#xD;建表&#xD;使用方法&#xD;返回结果&#xD;注意事项&#xD;create table&#xD;reservations (&#xD;id int8 primary key,&#xD;room_name text,&#xD;during tsrange&#xD;);&#xD;insert into&#xD;reservations (id, room_name, during)&#xD;values&#xD;(1, &amp;#39;Emerald&amp;#39;, &amp;#39;[2000-01-01 13:00, 2000-01-01 15:00)&amp;#39;),&#xD;(2, &amp;#39;Topaz&amp;#39;, &amp;#39;[2000-01-02 09:00, 2000-01-02 10:00)&amp;#39;);&#xD;const { data, error } = await supabase&#xD;.</description>
    </item>
    <item>
      <title>abortSignal()</title>
      <link>https://github.com/docs/app/sdkdocs/wechatsdk/database/db-abortsignal/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      <guid>https://github.com/docs/app/sdkdocs/wechatsdk/database/db-abortsignal/</guid>
      <description>设置获取请求的AbortSignal。&#xA;案例教程 link案例1 link&#xD;使用方法&#xD;返回结果&#xD;注意事项&#xD;const ac = new AbortController()&#xD;ac.abort()&#xD;const { data, error } = await supabase&#xD;.from(&amp;#39;very_big_table&amp;#39;)&#xD;.select()&#xD;.abortSignal(ac.signal)&#xD;{&#xD;&amp;#34;error&amp;#34;: {&#xD;&amp;#34;message&amp;#34;: &amp;#34;FetchError: The user aborted a request.&amp;#34;,&#xD;&amp;#34;details&amp;#34;: &amp;#34;&amp;#34;,&#xD;&amp;#34;hint&amp;#34;: &amp;#34;&amp;#34;,&#xD;&amp;#34;code&amp;#34;: &amp;#34;&amp;#34;&#xD;},&#xD;&amp;#34;status&amp;#34;: 400,&#xD;&amp;#34;statusText&amp;#34;: &amp;#34;Bad Request&amp;#34;&#xD;}&#xD;你可以使用 AbortController 来中止请求。 请注意，对于被中止的请求，状态 (status) 和状态文本 (statusText) 并不具有实际意义，因为请求未能完成。&#xA;参数说明 link&#xD;signal&#xD;[必要参数]&#xD;AbortSignal类型&#xD;用于获取请求的AbortSignal</description>
    </item>
    <item>
      <title>csv()</title>
      <link>https://github.com/docs/app/sdkdocs/wechatsdk/database/db-csv/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      <guid>https://github.com/docs/app/sdkdocs/wechatsdk/database/db-csv/</guid>
      <description>以 CSV 格式将数据（data）作为字符串返回。&#xA;案例教程 link案例1 link&#xD;建表&#xD;使用方法&#xD;返回结果&#xD;注意事项&#xD;create table&#xD;countries (id int8 primary key, name text);&#xD;insert into&#xD;countries (id, name)&#xD;values&#xD;(1, &amp;#39;Afghanistan&amp;#39;),&#xD;(2, &amp;#39;Albania&amp;#39;),&#xD;(3, &amp;#39;Algeria&amp;#39;);&#xD;const { data, error } = await supabase&#xD;.from(&amp;#39;countries&amp;#39;)&#xD;.select()&#xD;.csv()&#xD;{&#xD;&amp;#34;data&amp;#34;: &amp;#34;id,name\n1,Afghanistan\n2,Albania\n3,Algeria&amp;#34;,&#xD;&amp;#34;status&amp;#34;: 200,&#xD;&amp;#34;statusText&amp;#34;: &amp;#34;OK&amp;#34;&#xD;}&#xD;默认情况下，数据以 JSON 格式返回，但也可以选择返回 CSV 格式。</description>
    </item>
    <item>
      <title>select()</title>
      <link>https://github.com/docs/app/sdkdocs/wechatsdk/database/db-modifiers-select/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      <guid>https://github.com/docs/app/sdkdocs/wechatsdk/database/db-modifiers-select/</guid>
      <description>对查询结果执行SELECT。&#xA;默认情况下，.insert(), .update(), .upsert(), 和 .delete()不会返回修改过的记录。通过调用这个方法，修改过的行会返回到data。&#xA;const { data, error } = await supabase&#xD;.from(&amp;#39;countries&amp;#39;)&#xD;.upsert({ id: 1, name: &amp;#39;Algeria&amp;#39; })&#xD;.select()&#xD;案例教程 link案例1 link&#xD;建表&#xD;使用方法&#xD;返回结果&#xD;&gt;&#xD;create table&#xD;countries (id int8 primary key, name text);&#xD;insert into&#xD;countries (id, name)&#xD;values&#xD;(1, &amp;#39;Afghanistan&amp;#39;);&#xD;const { data, error } = await supabase&#xD;.from(&amp;#39;countries&amp;#39;)&#xD;.upsert({ id: 1, name: &amp;#39;Algeria&amp;#39; })&#xD;.select()&#xD;{&#xD;&amp;#34;data&amp;#34;: [&#xD;{&#xD;&amp;#34;id&amp;#34;: 1,&#xD;&amp;#34;name&amp;#34;: &amp;#34;Algeria&amp;#34;&#xD;}&#xD;],&#xD;&amp;#34;status&amp;#34;: 201,&#xD;&amp;#34;statusText&amp;#34;: &amp;#34;Created&amp;#34;&#xD;}&#xD;参数说明 link&#xD;列（column）&#xD;[可选参数]&#xD;query类型&#xD;要检索的列，用逗号分隔</description>
    </item>
    <item>
      <title>eq()</title>
      <link>https://github.com/docs/app/sdkdocs/wechatsdk/database/eq/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      <guid>https://github.com/docs/app/sdkdocs/wechatsdk/database/eq/</guid>
      <description>eq()用于匹配列值等于指定值的行。&#xA;案例教程 link案例1 link&#xD;建表&#xD;使用方法&#xD;返回结果&#xD;注意事项&#xD;create table&#xD;countries (id int8 primary key, name text);&#xD;insert into&#xD;countries (id, name)&#xD;values&#xD;(1, &amp;#39;Afghanistan&amp;#39;),&#xD;(2, &amp;#39;Albania&amp;#39;),&#xD;(3, &amp;#39;Algeria&amp;#39;);&#xD;const { data, error } = await supabase&#xD;.from(&amp;#39;countries&amp;#39;)&#xD;.select()&#xD;.eq(&amp;#39;name&amp;#39;, &amp;#39;Albania&amp;#39;)&#xD;{&#xD;&amp;#34;data&amp;#34;: [&#xD;{&#xD;&amp;#34;id&amp;#34;: 2,&#xD;&amp;#34;name&amp;#34;: &amp;#34;Albania&amp;#34;&#xD;}&#xD;],&#xD;&amp;#34;status&amp;#34;: 200,&#xD;&amp;#34;statusText&amp;#34;: &amp;#34;OK&amp;#34;&#xD;}&#xD;要检查column的值是否为NULL，你应该使用.is()来代替。&#xA;参数说明 link&#xD;列（column）&#xD;[必要参数]&#xD;string类型&#xD;要过滤的列&#xA;值（value）&#xD;[必要参数]&#xD;任意类型&#xD;用来过滤的值</description>
    </item>
    <item>
      <title>filter()</title>
      <link>https://github.com/docs/app/sdkdocs/wechatsdk/database/filter/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      <guid>https://github.com/docs/app/sdkdocs/wechatsdk/database/filter/</guid>
      <description>仅匹配满足过滤器条件的行。&#xA;尽管filter()函数是一种通用的筛选方式，但为了代码的可读性和维护性，官方建议优先使用特定的筛选方法，以利用更简洁和直观的筛选语法。 例如，使用eq()、gt()、lt()等特定的筛选方法，可以使查询更加清晰和易于理解。&#xA;filter() 期望您使用原始的 PostgREST语法 来指定过滤器的值。&#xA;.filter(&amp;#39;id&amp;#39;, &amp;#39;in&amp;#39;, &amp;#39;(5,6,7)&amp;#39;) // Use `()` for `in` filter&#xD;.filter(&amp;#39;arraycol&amp;#39;, &amp;#39;cs&amp;#39;, &amp;#39;{&amp;#34;a&amp;#34;,&amp;#34;b&amp;#34;}&amp;#39;) // Use `cs` for `contains()`, `{}` for array values&#xD;案例教程 link案例1 （和select一起使用） link&#xD;建表&#xD;使用方法&#xD;返回结果&#xD;&gt;&#xD;create table&#xD;countries (id int8 primary key, name text);&#xD;insert into&#xD;countries (id, name)&#xD;values&#xD;(1, &amp;#39;Afghanistan&amp;#39;),&#xD;(2, &amp;#39;Albania&amp;#39;),&#xD;(3, &amp;#39;Algeria&amp;#39;);&#xD;const { data, error } = await supabase&#xD;.from(&amp;#39;countries&amp;#39;)&#xD;.select()&#xD;.filter(&amp;#39;name&amp;#39;, &amp;#39;in&amp;#39;, &amp;#39;(&amp;#34;Algeria&amp;#34;,&amp;#34;Japan&amp;#34;)&amp;#39;)&#xD;{&#xD;&amp;#34;data&amp;#34;: [&#xD;{&#xD;&amp;#34;id&amp;#34;: 3,&#xD;&amp;#34;name&amp;#34;: &amp;#34;Algeria&amp;#34;&#xD;}&#xD;],&#xD;&amp;#34;status&amp;#34;: 200,&#xD;&amp;#34;statusText&amp;#34;: &amp;#34;OK&amp;#34;&#xD;}&#xD;案例2 （在外部表上） link&#xD;建表&#xD;使用方法&#xD;返回结果&#xD;&gt;&#xD;create table&#xD;countries (id int8 primary key, name text);&#xD;create table&#xD;cities (&#xD;id int8 primary key,&#xD;country_id int8 not null references countries,&#xD;name text&#xD;);&#xD;insert into&#xD;countries (id, name)&#xD;values&#xD;(1, &amp;#39;Germany&amp;#39;),&#xD;(2, &amp;#39;Indonesia&amp;#39;);&#xD;insert into&#xD;cities (id, country_id, name)&#xD;values&#xD;(1, 2, &amp;#39;Bali&amp;#39;),&#xD;(2, 1, &amp;#39;Munich&amp;#39;);&#xD;const { data, error } = await supabase&#xD;.</description>
    </item>
    <item>
      <title>gt()</title>
      <link>https://github.com/docs/app/sdkdocs/wechatsdk/database/gt/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      <guid>https://github.com/docs/app/sdkdocs/wechatsdk/database/gt/</guid>
      <description>gt()用于查找所有在所述列（column）上的值大于指定值（value）的记录。&#xA;案例教程 link案例1 （使用select） link&#xD;建表&#xD;使用方法&#xD;返回结果&#xD;注意事项&#xD;create table&#xD;countries (id int8 primary key, name text);&#xD;insert into&#xD;countries (id, name)&#xD;values&#xD;(1, &amp;#39;Afghanistan&amp;#39;),&#xD;(2, &amp;#39;Albania&amp;#39;),&#xD;(3, &amp;#39;Algeria&amp;#39;);&#xD;const { data, error } = await supabase&#xD;.from(&amp;#39;countries&amp;#39;)&#xD;.select()&#xD;.gt(&amp;#39;id&amp;#39;, 2)&#xD;{&#xD;&amp;#34;data&amp;#34;: [&#xD;{&#xD;&amp;#34;id&amp;#34;: 3,&#xD;&amp;#34;name&amp;#34;: &amp;#34;Algeria&amp;#34;&#xD;}&#xD;],&#xD;&amp;#34;status&amp;#34;: 200,&#xD;&amp;#34;statusText&amp;#34;: &amp;#34;OK&amp;#34;&#xD;}&#xD;当使用保留字作为列名时，需要添加双引号，例如：.gt(&#39;&amp;quot;order&amp;quot;&#39;, 2)&#xA;参数说明 link&#xD;列（column）&#xD;[必要参数]&#xD;string类型&#xD;要过滤的列&#xA;值（value）&#xD;[必要参数]&#xD;任意类型&#xD;用来过滤的值</description>
    </item>
    <item>
      <title>gte()</title>
      <link>https://github.com/docs/app/sdkdocs/wechatsdk/database/gte/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      <guid>https://github.com/docs/app/sdkdocs/wechatsdk/database/gte/</guid>
      <description>gte()用于查找所有在所述列（column）上的值大于或等于指定值（value）的记录。&#xA;案例教程 link案例1 (使用select) link&#xD;建表&#xD;使用方法&#xD;返回结果&#xD;create table&#xD;countries (id int8 primary key, name text);&#xD;insert into&#xD;countries (id, name)&#xD;values&#xD;(1, &amp;#39;Afghanistan&amp;#39;),&#xD;(2, &amp;#39;Albania&amp;#39;),&#xD;(3, &amp;#39;Algeria&amp;#39;);&#xD;const { data, error } = await supabase&#xD;.from(&amp;#39;countries&amp;#39;)&#xD;.select()&#xD;.gte(&amp;#39;id&amp;#39;, 2)&#xD;{&#xD;&amp;#34;data&amp;#34;: [&#xD;{&#xD;&amp;#34;id&amp;#34;: 2,&#xD;&amp;#34;name&amp;#34;: &amp;#34;Albania&amp;#34;&#xD;},&#xD;{&#xD;&amp;#34;id&amp;#34;: 3,&#xD;&amp;#34;name&amp;#34;: &amp;#34;Algeria&amp;#34;&#xD;}&#xD;],&#xD;&amp;#34;status&amp;#34;: 200,&#xD;&amp;#34;statusText&amp;#34;: &amp;#34;OK&amp;#34;&#xD;}&#xD;参数说明 link&#xD;列（column）&#xD;[必要参数]&#xD;string类型&#xD;要过滤的列&#xA;值（value）&#xD;[必要参数]&#xD;任意类型&#xD;用来过滤的值</description>
    </item>
    <item>
      <title>ilike()</title>
      <link>https://github.com/docs/app/sdkdocs/wechatsdk/database/ilike/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      <guid>https://github.com/docs/app/sdkdocs/wechatsdk/database/ilike/</guid>
      <description>ilike()用于查找所有在所述列（column）上的值与提供的 模板（pattern）相符的记录（不区分大小写）。&#xA;案例教程 link案例1 (使用select) link&#xD;建表&#xD;使用方法&#xD;create table&#xD;countries (id int8 primary key, name text);&#xD;insert into&#xD;countries (id, name)&#xD;values&#xD;(1, &amp;#39;Afghanistan&amp;#39;),&#xD;(2, &amp;#39;Albania&amp;#39;),&#xD;(3, &amp;#39;Algeria&amp;#39;);&#xD;const { data, error } = await supabase&#xD;.from(&amp;#39;countries&amp;#39;)&#xD;.select()&#xD;.ilike(&amp;#39;name&amp;#39;, &amp;#39;%Alba%&amp;#39;)&#xD;参数说明 link&#xD;列（column）&#xD;[必要参数]&#xD;string类型&#xD;要过滤的列&#xA;模式（pattern）&#xD;[必要参数]&#xD;string类型&#xD;与之匹配的模式</description>
    </item>
    <item>
      <title>in()</title>
      <link>https://github.com/docs/app/sdkdocs/wechatsdk/database/in/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      <guid>https://github.com/docs/app/sdkdocs/wechatsdk/database/in/</guid>
      <description>in_()用于查找所有在指定列（column）上数值存在于指定值列表（arry）中的记录&#xA;案例教程 link案例1 (使用select) link&#xD;建表&#xD;使用方法&#xD;返回结果&#xD;create table&#xD;countries (id int8 primary key, name text);&#xD;insert into&#xD;countries (id, name)&#xD;values&#xD;(1, &amp;#39;Afghanistan&amp;#39;),&#xD;(2, &amp;#39;Albania&amp;#39;),&#xD;(3, &amp;#39;Algeria&amp;#39;);&#xD;const { data, error } = await supabase&#xD;.from(&amp;#39;countries&amp;#39;)&#xD;.select()&#xD;.in(&amp;#39;name&amp;#39;, [&amp;#39;Albania&amp;#39;, &amp;#39;Algeria&amp;#39;])&#xD;{&#xD;&amp;#34;data&amp;#34;: [&#xD;{&#xD;&amp;#34;id&amp;#34;: 2,&#xD;&amp;#34;name&amp;#34;: &amp;#34;Albania&amp;#34;&#xD;},&#xD;{&#xD;&amp;#34;id&amp;#34;: 3,&#xD;&amp;#34;name&amp;#34;: &amp;#34;Algeria&amp;#34;&#xD;}&#xD;],&#xD;&amp;#34;status&amp;#34;: 200,&#xD;&amp;#34;statusText&amp;#34;: &amp;#34;OK&amp;#34;&#xD;}&#xD;参数 link&#xD;列（column）&#xD;[必要参数]&#xD;string类型&#xD;要过滤的列&#xA;值（value）&#xD;[必要参数]&#xD;任意类型数组&#xD;用来过滤的值</description>
    </item>
    <item>
      <title>is()</title>
      <link>https://github.com/docs/app/sdkdocs/wechatsdk/database/is/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      <guid>https://github.com/docs/app/sdkdocs/wechatsdk/database/is/</guid>
      <description>仅匹配列值与指定值相等的行。&#xA;对于非boolean型列，这只与检查column的值是否为NULL有关。 column的值是NULL，通过设置value为null。&#xA;对于boolean型列，你也可以将value设置为true或false，它的行为与 它的行为与.eq()相同。&#xA;案例教程 link案例1 (检查是否为 null) link&#xD;建表&#xD;使用方法&#xD;返回结果&#xD;注意事项&#xD;create table&#xD;countries (id int8 primary key, name text);&#xD;insert into&#xD;countries (id, name)&#xD;values&#xD;(1, &amp;#39;null&amp;#39;),&#xD;(2, null);&#xD;const { data, error } = await supabase&#xD;.from(&amp;#39;countries&amp;#39;)&#xD;.select()&#xD;.is(&amp;#39;name&amp;#39;, null)&#xD;{&#xD;&amp;#34;data&amp;#34;: [&#xD;{&#xD;&amp;#34;id&amp;#34;: 1,&#xD;&amp;#34;name&amp;#34;: &amp;#34;null&amp;#34;&#xD;}&#xD;],&#xD;&amp;#34;status&amp;#34;: 200,&#xD;&amp;#34;statusText&amp;#34;: &amp;#34;OK&amp;#34;&#xD;}&#xD;使用eq()筛选器在过滤null时不起作用。相反，您需要使用is()。&#xA;参数说明 link&#xD;列（column）&#xD;[必要参数]&#xD;string类型&#xD;要过滤的列&#xA;值（value）&#xD;[必要参数]&#xD;null或者boolean类型&#xD;用来过滤的值</description>
    </item>
    <item>
      <title>like()</title>
      <link>https://github.com/docs/app/sdkdocs/wechatsdk/database/like/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      <guid>https://github.com/docs/app/sdkdocs/wechatsdk/database/like/</guid>
      <description>like()用于查找所有在所述列（column）上的值与提供的 模板（pattern）相符的记录（区分大小写）。&#xA;案例教程 link案例1 (使用select) link&#xD;建表&#xD;使用方法&#xD;create table&#xD;countries (id int8 primary key, name text);&#xD;insert into&#xD;countries (id, name)&#xD;values&#xD;(1, &amp;#39;Afghanistan&amp;#39;),&#xD;(2, &amp;#39;Albania&amp;#39;),&#xD;(3, &amp;#39;Algeria&amp;#39;);&#xD;const { data, error } = await supabase&#xD;.from(&amp;#39;countries&amp;#39;)&#xD;.select()&#xD;.like(&amp;#39;name&amp;#39;, &amp;#39;%Alba%&amp;#39;)&#xD;参数说明 link&#xD;列（column）&#xD;[必要参数]&#xD;string类型&#xD;要过滤的列&#xA;模式（pattern）&#xD;[必要参数]&#xD;string类型&#xD;与之匹配的模式</description>
    </item>
    <item>
      <title>limit()</title>
      <link>https://github.com/docs/app/sdkdocs/wechatsdk/database/limit/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      <guid>https://github.com/docs/app/sdkdocs/wechatsdk/database/limit/</guid>
      <description>通过count限制查询结果。&#xA;案例教程 link案例1 （使用select） link&#xD;建表&#xD;使用方法&#xD;返回结果&#xD;create table&#xD;countries (id int8 primary key, name text);&#xD;insert into&#xD;countries (id, name)&#xD;values&#xD;(1, &amp;#39;Afghanistan&amp;#39;),&#xD;(2, &amp;#39;Albania&amp;#39;),&#xD;(3, &amp;#39;Algeria&amp;#39;);&#xD;const { data, error } = await supabase&#xD;.from(&amp;#39;countries&amp;#39;)&#xD;.select(&amp;#39;name&amp;#39;)&#xD;.limit(1)&#xD;{&#xD;&amp;#34;data&amp;#34;: [&#xD;{&#xD;&amp;#34;name&amp;#34;: &amp;#34;Afghanistan&amp;#34;&#xD;}&#xD;],&#xD;&amp;#34;status&amp;#34;: 200,&#xD;&amp;#34;statusText&amp;#34;: &amp;#34;OK&amp;#34;&#xD;}&#xD;案例2 （在外键表中） link&#xD;建表&#xD;使用方法&#xD;返回结果&#xD;create table&#xD;countries (id int8 primary key, name text);&#xD;create table&#xD;cities (&#xD;id int8 primary key,&#xD;country_id int8 not null references countries,&#xD;name text&#xD;);&#xD;insert into&#xD;countries (id, name)&#xD;values&#xD;(1, &amp;#39;United States&amp;#39;);&#xD;insert into&#xD;cities (id, country_id, name)&#xD;values&#xD;(1, 1, &amp;#39;Atlanta&amp;#39;),&#xD;(2, 1, &amp;#39;New York City&amp;#39;);&#xD;const { data, error } = await supabase&#xD;.</description>
    </item>
    <item>
      <title>lt()</title>
      <link>https://github.com/docs/app/sdkdocs/wechatsdk/database/lt/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      <guid>https://github.com/docs/app/sdkdocs/wechatsdk/database/lt/</guid>
      <description>lt()用于查找所有在所述列（column）上的值小于指定值（value）的记录。&#xA;案例教程 link案例1 (使用select) link&#xD;建表&#xD;使用方法&#xD;返回结果&#xD;create table&#xD;countries (id int8 primary key, name text);&#xD;insert into&#xD;countries (id, name)&#xD;values&#xD;(1, &amp;#39;Afghanistan&amp;#39;),&#xD;(2, &amp;#39;Albania&amp;#39;),&#xD;(3, &amp;#39;Algeria&amp;#39;);&#xD;const { data, error } = await supabase&#xD;.from(&amp;#39;countries&amp;#39;)&#xD;.select()&#xD;.lt(&amp;#39;id&amp;#39;, 2)&#xD;{&#xD;&amp;#34;data&amp;#34;: [&#xD;{&#xD;&amp;#34;id&amp;#34;: 1,&#xD;&amp;#34;name&amp;#34;: &amp;#34;Afghanistan&amp;#34;&#xD;}&#xD;],&#xD;&amp;#34;status&amp;#34;: 200,&#xD;&amp;#34;statusText&amp;#34;: &amp;#34;OK&amp;#34;&#xD;}&#xD;参数说明 link&#xD;列（column）&#xD;[必要参数]&#xD;string类型&#xD;要过滤的列&#xA;值（value）&#xD;[必要参数]&#xD;任意类型&#xD;用来过滤的值</description>
    </item>
    <item>
      <title>lte()</title>
      <link>https://github.com/docs/app/sdkdocs/wechatsdk/database/lte/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      <guid>https://github.com/docs/app/sdkdocs/wechatsdk/database/lte/</guid>
      <description>lte()用于查找所有在所述列（column）上的值小于或等于指定值（value）的记录。&#xA;案例教程 link案例1 (使用select) link&#xD;建表&#xD;使用方法&#xD;返回结果&#xD;create table&#xD;countries (id int8 primary key, name text);&#xD;insert into&#xD;countries (id, name)&#xD;values&#xD;(1, &amp;#39;Afghanistan&amp;#39;),&#xD;(2, &amp;#39;Albania&amp;#39;),&#xD;(3, &amp;#39;Algeria&amp;#39;);&#xD;const { data, error } = await supabase&#xD;.from(&amp;#39;countries&amp;#39;)&#xD;.select()&#xD;.lte(&amp;#39;id&amp;#39;, 2)&#xD;{&#xD;&amp;#34;data&amp;#34;: [&#xD;{&#xD;&amp;#34;id&amp;#34;: 1,&#xD;&amp;#34;name&amp;#34;: &amp;#34;Afghanistan&amp;#34;&#xD;},&#xD;{&#xD;&amp;#34;id&amp;#34;: 2,&#xD;&amp;#34;name&amp;#34;: &amp;#34;Albania&amp;#34;&#xD;}&#xD;],&#xD;&amp;#34;status&amp;#34;: 200,&#xD;&amp;#34;statusText&amp;#34;: &amp;#34;OK&amp;#34;&#xD;}&#xD;参数说明 link&#xD;列（column）&#xD;[必要参数]&#xD;string类型&#xD;要过滤的列&#xA;值（value）&#xD;[必要参数]&#xD;任意类型&#xD;用来过滤的值</description>
    </item>
    <item>
      <title>match()</title>
      <link>https://github.com/docs/app/sdkdocs/wechatsdk/database/match/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      <guid>https://github.com/docs/app/sdkdocs/wechatsdk/database/match/</guid>
      <description>仅匹配每个查询(query)键中的列与其关联值相等的行。相当于多个 .eq() 的简写。&#xA;案例教程 link案例1 link&#xD;建表&#xD;使用方法&#xD;返回结果&#xD;&gt;&#xD;create table&#xD;countries (id int8 primary key, name text);&#xD;insert into&#xD;countries (id, name)&#xD;values&#xD;(1, &amp;#39;Afghanistan&amp;#39;),&#xD;(2, &amp;#39;Albania&amp;#39;),&#xD;(3, &amp;#39;Algeria&amp;#39;);&#xD;const { data, error } = await supabase&#xD;.from(&amp;#39;countries&amp;#39;)&#xD;.select(&amp;#39;name&amp;#39;)&#xD;.match({ id: 2, name: &amp;#39;Albania&amp;#39; })&#xD;{&#xD;&amp;#34;data&amp;#34;: [&#xD;{&#xD;&amp;#34;name&amp;#34;: &amp;#34;Albania&amp;#34;&#xD;}&#xD;],&#xD;&amp;#34;status&amp;#34;: 200,&#xD;&amp;#34;statusText&amp;#34;: &amp;#34;OK&amp;#34;&#xD;}&#xD;参数说明 link&#xD;查询（query）&#xD;[必要参数]&#xD;Record类型&#xD;用于筛选的对象，其中列名作为键映射到它们的筛选值。</description>
    </item>
    <item>
      <title>maybeSingle()</title>
      <link>https://github.com/docs/app/sdkdocs/wechatsdk/database/maybesingle/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      <guid>https://github.com/docs/app/sdkdocs/wechatsdk/database/maybesingle/</guid>
      <description>将数据(data)作为单个对象返回，而不是返回一个对象数组。&#xA;案例教程 link案例1 link&#xD;建表&#xD;使用方法&#xD;返回结果&#xD;create table&#xD;countries (id int8 primary key, name text);&#xD;insert into&#xD;countries (id, name)&#xD;values&#xD;(1, &amp;#39;Afghanistan&amp;#39;),&#xD;(2, &amp;#39;Albania&amp;#39;),&#xD;(3, &amp;#39;Algeria&amp;#39;);&#xD;const { data, error } = await supabase&#xD;.from(&amp;#39;countries&amp;#39;)&#xD;.select()&#xD;.eq(&amp;#39;name&amp;#39;, &amp;#39;Singapore&amp;#39;)&#xD;.maybeSingle()&#xD;{&#xD;&amp;#34;status&amp;#34;: 200,&#xD;&amp;#34;statusText&amp;#34;: &amp;#34;OK&amp;#34;&#xD;}&#xD;</description>
    </item>
    <item>
      <title>rangeLte()</title>
      <link>https://github.com/docs/app/sdkdocs/wechatsdk/database/rangelte/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      <guid>https://github.com/docs/app/sdkdocs/wechatsdk/database/rangelte/</guid>
      <description>仅适用于范围列&#xA;仅匹配列中的每个元素要么包含在范围(range)内，要么小于范围(range)中的任何元素的行。&#xA;案例教程 link案例1 (使用select) link&#xD;建表&#xD;使用方法&#xD;返回结果&#xD;注意事项&#xD;create table&#xD;reservations (&#xD;id int8 primary key,&#xD;room_name text,&#xD;during tsrange&#xD;);&#xD;insert into&#xD;reservations (id, room_name, during)&#xD;values&#xD;(1, &amp;#39;Emerald&amp;#39;, &amp;#39;[2000-01-01 13:00, 2000-01-01 15:00)&amp;#39;),&#xD;(2, &amp;#39;Topaz&amp;#39;, &amp;#39;[2000-01-02 09:00, 2000-01-02 10:00)&amp;#39;);&#xD;const { data, error } = await supabase&#xD;.from(&amp;#39;reservations&amp;#39;)&#xD;.select()&#xD;.rangeLte(&amp;#39;during&amp;#39;, &amp;#39;[2000-01-01 14:00, 2000-01-01 16:00)&amp;#39;)&#xD;{&#xD;&amp;#34;data&amp;#34;: [&#xD;{&#xD;&amp;#34;id&amp;#34;: 1,&#xD;&amp;#34;room_name&amp;#34;: &amp;#34;Emerald&amp;#34;,&#xD;&amp;#34;during&amp;#34;: &amp;#34;[\&amp;#34;2000-01-01 13:00:00\&amp;#34;,\&amp;#34;2000-01-01 15:00:00\&amp;#34;)&amp;#34;&#xD;}&#xD;],&#xD;&amp;#34;status&amp;#34;: 200,&#xD;&amp;#34;statusText&amp;#34;: &amp;#34;OK&amp;#34;&#xD;}&#xD;Postgres 支持多种范围类型。您可以使用范围值的字符串表示来过滤范围列。</description>
    </item>
    <item>
      <title>neq()</title>
      <link>https://github.com/docs/app/sdkdocs/wechatsdk/database/neq/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      <guid>https://github.com/docs/app/sdkdocs/wechatsdk/database/neq/</guid>
      <description>neq()用于匹配列值不等于指定值的行。&#xA;案例教程 link案例1 link&#xD;建表&#xD;使用方法&#xD;返回结果&#xD;create table&#xD;countries (id int8 primary key, name text);&#xD;insert into&#xD;countries (id, name)&#xD;values&#xD;(1, &amp;#39;Afghanistan&amp;#39;),&#xD;(2, &amp;#39;Albania&amp;#39;),&#xD;(3, &amp;#39;Algeria&amp;#39;);&#xD;const { data, error } = await supabase&#xD;.from(&amp;#39;countries&amp;#39;)&#xD;.select()&#xD;.neq(&amp;#39;name&amp;#39;, &amp;#39;Albania&amp;#39;)&#xD;{&#xD;&amp;#34;data&amp;#34;: [&#xD;{&#xD;&amp;#34;id&amp;#34;: 1,&#xD;&amp;#34;name&amp;#34;: &amp;#34;Afghanistan&amp;#34;&#xD;},&#xD;{&#xD;&amp;#34;id&amp;#34;: 3,&#xD;&amp;#34;name&amp;#34;: &amp;#34;Algeria&amp;#34;&#xD;}&#xD;],&#xD;&amp;#34;status&amp;#34;: 200,&#xD;&amp;#34;statusText&amp;#34;: &amp;#34;OK&amp;#34;&#xD;}&#xD;参数说明 link&#xD;列（column）&#xD;[必要参数]&#xD;string类型&#xD;要过滤的列&#xA;值（value）&#xD;[必要参数]&#xD;任意类型&#xD;用来过滤的值</description>
    </item>
    <item>
      <title>not()</title>
      <link>https://github.com/docs/app/sdkdocs/wechatsdk/database/not/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      <guid>https://github.com/docs/app/sdkdocs/wechatsdk/database/not/</guid>
      <description>仅匹配不满足筛选条件的行。&#xA;not()函数要求您使用原始的PostgREST语法来表示筛选条件的值。&#xA;.not(&amp;#39;id&amp;#39;, &amp;#39;in&amp;#39;, &amp;#39;(5,6,7)&amp;#39;) // Use `()` for `in` filter&#xD;.not(&amp;#39;arraycol&amp;#39;, &amp;#39;cs&amp;#39;, &amp;#39;{&amp;#34;a&amp;#34;,&amp;#34;b&amp;#34;}&amp;#39;) // Use `cs` for `contains()`, `{}` for array values&#xD;案例教程 link案例1 link&#xD;建表&#xD;使用方法&#xD;返回结果&#xD;&gt;&#xD;create table&#xD;countries (id int8 primary key, name text);&#xD;insert into&#xD;countries (id, name)&#xD;values&#xD;(1, &amp;#39;null&amp;#39;),&#xD;(2, null);&#xD;const { data, error } = await supabase&#xD;.from(&amp;#39;countries&amp;#39;)&#xD;.select()&#xD;.not(&amp;#39;name&amp;#39;, &amp;#39;is&amp;#39;, null)&#xD;{&#xD;&amp;#34;data&amp;#34;: [&#xD;{&#xD;&amp;#34;id&amp;#34;: 1,&#xD;&amp;#34;name&amp;#34;: &amp;#34;null&amp;#34;&#xD;}&#xD;],&#xD;&amp;#34;status&amp;#34;: 200,&#xD;&amp;#34;statusText&amp;#34;: &amp;#34;OK&amp;#34;&#xD;}&#xD;参数说明 link&#xD;列（column）&#xD;[必要参数]&#xD;string类型&#xD;要过滤的列</description>
    </item>
    <item>
      <title>调用Postgres函数</title>
      <link>https://github.com/docs/app/sdkdocs/wechatsdk/database/rpc/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      <guid>https://github.com/docs/app/sdkdocs/wechatsdk/database/rpc/</guid>
      <description>你可以将Postgres函数作为远程过程调用（Remote Procedure Calls）来调用，即你可以从任何地方执行数据库中的逻辑。 函数在逻辑很少更改时非常有用，比如用于密码重置和更新等情况。&#xA;下面是一个示例的 Postgres 函数定义：&#xA;create or replace function hello_world() returns text as $$&#xD;select &amp;#39;Hello world&amp;#39;;&#xD;$$ language sql;&#xD;这个函数叫做hello_world，它不带参数，返回一个text类型的结果。函数的逻辑很简单，就是返回字符串&amp;quot;Hello world&amp;quot;。 你可以从任何地方调用这个函数，并获得结果&amp;quot;Hello world&amp;quot;。&#xA;案例教程 link案例1 （调用一个没有参数的Postgres函数） link&#xD;建表&#xD;使用方法&#xD;返回结果&#xD;create function hello_world() returns text as $$&#xD;select &amp;#39;Hello world&amp;#39;;&#xD;$$ language sql;&#xD;const { data, error } = await supabase.rpc(&amp;#39;hello_world&amp;#39;)&#xD;{&#xD;&amp;#34;data&amp;#34;: &amp;#34;Hello world&amp;#34;,&#xD;&amp;#34;status&amp;#34;: 200,&#xD;&amp;#34;statusText&amp;#34;: &amp;#34;OK&amp;#34;&#xD;}&#xD;案例2 （调用一个带参数的Postgres函数） link&#xD;建表&#xD;使用方法&#xD;返回结果&#xD;create function echo(say text) returns text as $$&#xD;select say;&#xD;$$ language sql;&#xD;const { data, error } = await supabase.</description>
    </item>
    <item>
      <title>or()</title>
      <link>https://github.com/docs/app/sdkdocs/wechatsdk/database/or/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      <guid>https://github.com/docs/app/sdkdocs/wechatsdk/database/or/</guid>
      <description>仅匹配满足至少一个过滤条件的行。&#xA;or() 期望您使用原始的 PostgREST语法 来指定过滤器的名称和值。&#xA;.or(&amp;#39;id.in.(5,6,7), arraycol.cs.{&amp;#34;a&amp;#34;,&amp;#34;b&amp;#34;}&amp;#39;) // Use `()` for `in` filter, `{}` for array values and `cs` for `contains()`.&#xD;.or(&amp;#39;id.in.(5,6,7), arraycol.cd.{&amp;#34;a&amp;#34;,&amp;#34;b&amp;#34;}&amp;#39;) // Use `cd` for `containedBy()`&#xD;案例教程 link案例1 （和select一起使用） link&#xD;建表&#xD;使用方法&#xD;返回结果&#xD;&gt;&#xD;create table&#xD;countries (id int8 primary key, name text);&#xD;insert into&#xD;countries (id, name)&#xD;values&#xD;(1, &amp;#39;Afghanistan&amp;#39;),&#xD;(2, &amp;#39;Albania&amp;#39;),&#xD;(3, &amp;#39;Algeria&amp;#39;);&#xD;const { data, error } = await supabase&#xD;.from(&amp;#39;countries&amp;#39;)&#xD;.select(&amp;#39;name&amp;#39;)&#xD;.or(&amp;#39;id.eq.2,name.eq.Algeria&amp;#39;)&#xD;{&#xD;&amp;#34;data&amp;#34;: [&#xD;{&#xD;&amp;#34;name&amp;#34;: &amp;#34;Albania&amp;#34;&#xD;},&#xD;{&#xD;&amp;#34;name&amp;#34;: &amp;#34;Algeria&amp;#34;&#xD;}&#xD;],&#xD;&amp;#34;status&amp;#34;: 200,&#xD;&amp;#34;statusText&amp;#34;: &amp;#34;OK&amp;#34;&#xD;}&#xD;案例2 （与and一起使用or） link&#xD;建表&#xD;使用方法&#xD;&gt;&#xD;create table&#xD;countries (id int8 primary key, name text);&#xD;insert into&#xD;countries (id, name)&#xD;values&#xD;(1, &amp;#39;Afghanistan&amp;#39;),&#xD;(2, &amp;#39;Albania&amp;#39;),&#xD;(3, &amp;#39;Algeria&amp;#39;);&#xD;const { data, error } = await supabase&#xD;.</description>
    </item>
    <item>
      <title>order()</title>
      <link>https://github.com/docs/app/sdkdocs/wechatsdk/database/order/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      <guid>https://github.com/docs/app/sdkdocs/wechatsdk/database/order/</guid>
      <description>按列对查询结果进行排序。&#xA;你可以多次调用这个方法来按多列排序。&#xA;你可以对外部表进行排序，但这并不影响对当前表的排序。&#xA;案例教程 link案例1 （使用select） link&#xD;建表&#xD;使用方法&#xD;返回结果&#xD;&gt;&#xD;create table&#xD;countries (id int8 primary key, name text);&#xD;insert into&#xD;countries (id, name)&#xD;values&#xD;(1, &amp;#39;Afghanistan&amp;#39;),&#xD;(2, &amp;#39;Albania&amp;#39;),&#xD;(3, &amp;#39;Algeria&amp;#39;);&#xD;const { data, error } = await supabase&#xD;.from(&amp;#39;countries&amp;#39;)&#xD;.select(&amp;#39;id&amp;#39;, &amp;#39;name&amp;#39;)&#xD;.order(&amp;#39;id&amp;#39;, { ascending: false })&#xD;{&#xD;&amp;#34;data&amp;#34;: [&#xD;{&#xD;&amp;#34;id&amp;#34;: 3,&#xD;&amp;#34;name&amp;#34;: &amp;#34;Algeria&amp;#34;&#xD;},&#xD;{&#xD;&amp;#34;id&amp;#34;: 2,&#xD;&amp;#34;name&amp;#34;: &amp;#34;Albania&amp;#34;&#xD;},&#xD;{&#xD;&amp;#34;id&amp;#34;: 1,&#xD;&amp;#34;name&amp;#34;: &amp;#34;Afghanistan&amp;#34;&#xD;}&#xD;],&#xD;&amp;#34;status&amp;#34;: 200,&#xD;&amp;#34;statusText&amp;#34;: &amp;#34;OK&amp;#34;&#xD;}&#xD;案例2 （在外部表） link&#xD;建表&#xD;使用方法&#xD;返回结果&#xD;注意事项&#xD;&gt;&#xD;create table&#xD;countries (id int8 primary key, name text);&#xD;create table&#xD;cities (&#xD;id int8 primary key,&#xD;country_id int8 not null references countries,&#xD;name text&#xD;);&#xD;insert into&#xD;countries (id, name)&#xD;values&#xD;(1, &amp;#39;United States&amp;#39;),&#xD;(2, &amp;#39;Vanuatu&amp;#39;);&#xD;insert into&#xD;cities (id, country_id, name)&#xD;values&#xD;(1, 1, &amp;#39;Atlanta&amp;#39;),&#xD;(2, 1, &amp;#39;New York City&amp;#39;);&#xD;const { data, error } = await supabase&#xD;.</description>
    </item>
    <item>
      <title>overlaps()</title>
      <link>https://github.com/docs/app/sdkdocs/wechatsdk/database/overlaps/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      <guid>https://github.com/docs/app/sdkdocs/wechatsdk/database/overlaps/</guid>
      <description>仅适用于数组列和范围列&#xA;仅匹配列（column）和值（value）有一个共同元素的行。&#xA;案例教程 link案例1 （关于数组列） link&#xD;建表&#xD;使用方法&#xD;返回结果&#xD;create table&#xD;issues (&#xD;id int8 primary key,&#xD;title text,&#xD;tags text[]&#xD;);&#xD;insert into&#xD;issues (id, title, tags)&#xD;values&#xD;(1, &amp;#39;Cache invalidation is not working&amp;#39;, array[&amp;#39;is:open&amp;#39;, &amp;#39;severity:high&amp;#39;, &amp;#39;priority:low&amp;#39;]),&#xD;(2, &amp;#39;Use better names&amp;#39;, array[&amp;#39;is:open&amp;#39;, &amp;#39;severity:low&amp;#39;, &amp;#39;priority:medium&amp;#39;]);&#xD;const { data, error } = await supabase&#xD;.from(&amp;#39;issues&amp;#39;)&#xD;.select(&amp;#39;title&amp;#39;)&#xD;.overlaps(&amp;#39;tags&amp;#39;, [&amp;#39;is:closed&amp;#39;, &amp;#39;severity:high&amp;#39;])&#xD;{&#xD;&amp;#34;data&amp;#34;: [&#xD;{&#xD;&amp;#34;title&amp;#34;: &amp;#34;Cache invalidation is not working&amp;#34;&#xD;}&#xD;],&#xD;&amp;#34;status&amp;#34;: 200,&#xD;&amp;#34;statusText&amp;#34;: &amp;#34;OK&amp;#34;&#xD;}&#xD;案例2 （关于范围列） link&#xD;建表&#xD;使用方法&#xD;返回结果&#xD;注意事项&#xD;create table&#xD;reservations (&#xD;id int8 primary key,&#xD;room_name text,&#xD;during tsrange&#xD;);&#xD;insert into&#xD;reservations (id, room_name, during)&#xD;values&#xD;(1, &amp;#39;Emerald&amp;#39;, &amp;#39;[2000-01-01 13:00, 2000-01-01 15:00)&amp;#39;),&#xD;(2, &amp;#39;Topaz&amp;#39;, &amp;#39;[2000-01-02 09:00, 2000-01-02 10:00)&amp;#39;);&#xD;const { data, error } = await supabase&#xD;.</description>
    </item>
    <item>
      <title>range()</title>
      <link>https://github.com/docs/app/sdkdocs/wechatsdk/database/range/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      <guid>https://github.com/docs/app/sdkdocs/wechatsdk/database/range/</guid>
      <description>通过 from和 to来限制查询结果。&#xA;案例教程 link案例1 link&#xD;建表&#xD;使用方法&#xD;返回结果&#xD;create table&#xD;countries (id int8 primary key, name text);&#xD;insert into&#xD;countries (id, name)&#xD;values&#xD;(1, &amp;#39;Afghanistan&amp;#39;),&#xD;(2, &amp;#39;Albania&amp;#39;),&#xD;(3, &amp;#39;Algeria&amp;#39;);&#xD;const { data, error } = await supabase&#xD;.from(&amp;#39;countries&amp;#39;)&#xD;.select(&amp;#39;name&amp;#39;)&#xD;.range(0, 1)&#xD;{&#xD;&amp;#34;data&amp;#34;: [&#xD;{&#xD;&amp;#34;name&amp;#34;: &amp;#34;Afghanistan&amp;#34;&#xD;},&#xD;{&#xD;&amp;#34;name&amp;#34;: &amp;#34;Albania&amp;#34;&#xD;}&#xD;],&#xD;&amp;#34;status&amp;#34;: 200,&#xD;&amp;#34;statusText&amp;#34;: &amp;#34;OK&amp;#34;&#xD;}&#xD;参数说明 link&#xD;from&#xD;[必要参数]&#xD;number类型&#xD;用于限制结果的起始索引&#xA;to&#xD;[必要参数]&#xD;number类型&#xD;限制结果的最后一个索引&#xA;选项（option）&#xD;[可选参数]&#xD;object类型&#xD;命名的参数</description>
    </item>
    <item>
      <title>rangeAdjacent()</title>
      <link>https://github.com/docs/app/sdkdocs/wechatsdk/database/rangeadjacent/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      <guid>https://github.com/docs/app/sdkdocs/wechatsdk/database/rangeadjacent/</guid>
      <description>仅适用于范围列&#xA;仅匹配列与范围(range)互斥且两个范围之间不能有任何元素的行。&#xA;案例教程 link案例1 (使用select) link&#xD;建表&#xD;使用方法&#xD;返回结果&#xD;注意事项&#xD;create table&#xD;reservations (&#xD;id int8 primary key,&#xD;room_name text,&#xD;during tsrange&#xD;);&#xD;insert into&#xD;reservations (id, room_name, during)&#xD;values&#xD;(1, &amp;#39;Emerald&amp;#39;, &amp;#39;[2000-01-01 13:00, 2000-01-01 15:00)&amp;#39;),&#xD;(2, &amp;#39;Topaz&amp;#39;, &amp;#39;[2000-01-02 09:00, 2000-01-02 10:00)&amp;#39;);&#xD;const { data, error } = await supabase&#xD;.from(&amp;#39;reservations&amp;#39;)&#xD;.select()&#xD;.rangeAdjacent(&amp;#39;during&amp;#39;, &amp;#39;[2000-01-01 12:00, 2000-01-01 13:00)&amp;#39;)&#xD;{&#xD;&amp;#34;data&amp;#34;: [&#xD;{&#xD;&amp;#34;id&amp;#34;: 1,&#xD;&amp;#34;room_name&amp;#34;: &amp;#34;Emerald&amp;#34;,&#xD;&amp;#34;during&amp;#34;: &amp;#34;[\&amp;#34;2000-01-01 13:00:00\&amp;#34;,\&amp;#34;2000-01-01 15:00:00\&amp;#34;)&amp;#34;&#xD;}&#xD;],&#xD;&amp;#34;status&amp;#34;: 200,&#xD;&amp;#34;statusText&amp;#34;: &amp;#34;OK&amp;#34;&#xD;}&#xD;Postgres 支持多种范围类型。您可以使用范围值的字符串表示来过滤范围列。</description>
    </item>
    <item>
      <title>rangeGt()</title>
      <link>https://github.com/docs/app/sdkdocs/wechatsdk/database/rangegt/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      <guid>https://github.com/docs/app/sdkdocs/wechatsdk/database/rangegt/</guid>
      <description>仅适用于范围（range）列&#xA;仅匹配列中的每个元素都大于范围(range)中的任何元素的行。&#xA;案例教程 link案例1 (使用select) link&#xD;建表&#xD;使用方法&#xD;返回结果&#xD;注意事项&#xD;create table&#xD;reservations (&#xD;id int8 primary key,&#xD;room_name text,&#xD;during tsrange&#xD;);&#xD;insert into&#xD;reservations (id, room_name, during)&#xD;values&#xD;(1, &amp;#39;Emerald&amp;#39;, &amp;#39;[2000-01-01 13:00, 2000-01-01 15:00)&amp;#39;),&#xD;(2, &amp;#39;Topaz&amp;#39;, &amp;#39;[2000-01-02 09:00, 2000-01-02 10:00)&amp;#39;);&#xD;const { data, error } = await supabase&#xD;.from(&amp;#39;reservations&amp;#39;)&#xD;.select()&#xD;.rangeGt(&amp;#39;during&amp;#39;, &amp;#39;[2000-01-02 08:00, 2000-01-02 09:00)&amp;#39;)&#xD;{&#xD;&amp;#34;data&amp;#34;: [&#xD;{&#xD;&amp;#34;id&amp;#34;: 2,&#xD;&amp;#34;room_name&amp;#34;: &amp;#34;Topaz&amp;#34;,&#xD;&amp;#34;during&amp;#34;: &amp;#34;[\&amp;#34;2000-01-02 09:00:00\&amp;#34;,\&amp;#34;2000-01-02 10:00:00\&amp;#34;)&amp;#34;&#xD;}&#xD;],&#xD;&amp;#34;status&amp;#34;: 200,&#xD;&amp;#34;statusText&amp;#34;: &amp;#34;OK&amp;#34;&#xD;}&#xD;Postgres 支持多种范围类型。您可以使用范围值的字符串表示来过滤范围列。</description>
    </item>
    <item>
      <title>rangeGte()</title>
      <link>https://github.com/docs/app/sdkdocs/wechatsdk/database/rangegte/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      <guid>https://github.com/docs/app/sdkdocs/wechatsdk/database/rangegte/</guid>
      <description>仅适用于范围（range）列&#xA;仅匹配列中的每个元素要么包含在范围(range)内，要么大于范围(range)中的任何元素的行。&#xA;案例教程 link案例1 (使用select) link&#xD;建表&#xD;使用方法&#xD;返回结果&#xD;注意事项&#xD;create table&#xD;reservations (&#xD;id int8 primary key,&#xD;room_name text,&#xD;during tsrange&#xD;);&#xD;insert into&#xD;reservations (id, room_name, during)&#xD;values&#xD;(1, &amp;#39;Emerald&amp;#39;, &amp;#39;[2000-01-01 13:00, 2000-01-01 15:00)&amp;#39;),&#xD;(2, &amp;#39;Topaz&amp;#39;, &amp;#39;[2000-01-02 09:00, 2000-01-02 10:00)&amp;#39;);&#xD;const { data, error } = await supabase&#xD;.from(&amp;#39;reservations&amp;#39;)&#xD;.select()&#xD;.rangeGte(&amp;#39;during&amp;#39;, &amp;#39;[2000-01-02 08:30, 2000-01-02 09:30)&amp;#39;)&#xD;{&#xD;&amp;#34;data&amp;#34;: [&#xD;{&#xD;&amp;#34;id&amp;#34;: 2,&#xD;&amp;#34;room_name&amp;#34;: &amp;#34;Topaz&amp;#34;,&#xD;&amp;#34;during&amp;#34;: &amp;#34;[\&amp;#34;2000-01-02 09:00:00\&amp;#34;,\&amp;#34;2000-01-02 10:00:00\&amp;#34;)&amp;#34;&#xD;}&#xD;],&#xD;&amp;#34;status&amp;#34;: 200,&#xD;&amp;#34;statusText&amp;#34;: &amp;#34;OK&amp;#34;&#xD;}&#xD;Postgres 支持多种范围类型。您可以使用范围值的字符串表示来过滤范围列。</description>
    </item>
    <item>
      <title>rangeLt()</title>
      <link>https://github.com/docs/app/sdkdocs/wechatsdk/database/rangelt/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      <guid>https://github.com/docs/app/sdkdocs/wechatsdk/database/rangelt/</guid>
      <description>仅适用于范围列&#xA;仅匹配列中的每个元素都小于范围(range)中的任何元素的行。&#xA;案例教程 link案例1 link&#xD;建表&#xD;使用方法&#xD;返回结果&#xD;注意事项&#xD;create table&#xD;reservations (&#xD;id int8 primary key,&#xD;room_name text,&#xD;during tsrange&#xD;);&#xD;insert into&#xD;reservations (id, room_name, during)&#xD;values&#xD;(1, &amp;#39;Emerald&amp;#39;, &amp;#39;[2000-01-01 13:00, 2000-01-01 15:00)&amp;#39;),&#xD;(2, &amp;#39;Topaz&amp;#39;, &amp;#39;[2000-01-02 09:00, 2000-01-02 10:00)&amp;#39;);&#xD;const { data, error } = await supabase&#xD;.from(&amp;#39;reservations&amp;#39;)&#xD;.select()&#xD;.rangeLt(&amp;#39;during&amp;#39;, &amp;#39;[2000-01-01 15:00, 2000-01-01 16:00)&amp;#39;)&#xD;{&#xD;&amp;#34;data&amp;#34;: [&#xD;{&#xD;&amp;#34;id&amp;#34;: 1,&#xD;&amp;#34;room_name&amp;#34;: &amp;#34;Emerald&amp;#34;,&#xD;&amp;#34;during&amp;#34;: &amp;#34;[\&amp;#34;2000-01-01 13:00:00\&amp;#34;,\&amp;#34;2000-01-01 15:00:00\&amp;#34;)&amp;#34;&#xD;}&#xD;],&#xD;&amp;#34;status&amp;#34;: 200,&#xD;&amp;#34;statusText&amp;#34;: &amp;#34;OK&amp;#34;&#xD;}&#xD;Postgres 支持多种范围类型。您可以使用范围值的字符串表示来过滤范围列。</description>
    </item>
    <item>
      <title>single()</title>
      <link>https://github.com/docs/app/sdkdocs/wechatsdk/database/single/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      <guid>https://github.com/docs/app/sdkdocs/wechatsdk/database/single/</guid>
      <description>将数据(data)作为单个对象返回，而不是返回一个对象数组。&#xA;案例教程 link案例1 link&#xD;建表&#xD;使用方法&#xD;返回结果&#xD;create table&#xD;countries (id int8 primary key, name text);&#xD;insert into&#xD;countries (id, name)&#xD;values&#xD;(1, &amp;#39;Afghanistan&amp;#39;),&#xD;(2, &amp;#39;Albania&amp;#39;),&#xD;(3, &amp;#39;Algeria&amp;#39;);&#xD;const { data, error } = await supabase&#xD;.from(&amp;#39;countries&amp;#39;)&#xD;.select(&amp;#39;name&amp;#39;)&#xD;.limit(1)&#xD;.single()&#xD;{&#xD;&amp;#34;data&amp;#34;: {&#xD;&amp;#34;name&amp;#34;: &amp;#34;Afghanistan&amp;#34;&#xD;},&#xD;&amp;#34;status&amp;#34;: 200,&#xD;&amp;#34;statusText&amp;#34;: &amp;#34;OK&amp;#34;&#xD;}&#xD;</description>
    </item>
    <item>
      <title>textSearch()</title>
      <link>https://github.com/docs/app/sdkdocs/wechatsdk/database/textsearch/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      <guid>https://github.com/docs/app/sdkdocs/wechatsdk/database/textsearch/</guid>
      <description>仅适用于文本和 tsvector 列。&#xA;textSearch()作用是找到所有在指定列上的 tsvector 值与给定的 to_tsquery 查询条件匹配的记录。&#xA;更多信息，请参见Postgres全文搜索。 案例教程 link案例1 （文本搜索） link&#xD;使用方法&#xD;const { data, error } = await supabase&#xD;.from(&amp;#39;quotes&amp;#39;)&#xD;.select(&amp;#39;catchphrase&amp;#39;)&#xD;.textSearch(&amp;#39;catchphrase&amp;#39;, `&amp;#39;fat&amp;#39; &amp;amp; &amp;#39;cat&amp;#39;`, {&#xD;config: &amp;#39;english&amp;#39;&#xD;})&#xD;案例2 （基本归一化） link&#xD;使用方法&#xD;注意事项&#xD;const { data, error } = await supabase&#xD;.from(&amp;#39;quotes&amp;#39;)&#xD;.select(&amp;#39;catchphrase&amp;#39;)&#xD;.textSearch(&amp;#39;catchphrase&amp;#39;, `&amp;#39;fat&amp;#39; &amp;amp; &amp;#39;cat&amp;#39;`, {&#xD;type: &amp;#39;plain&amp;#39;,&#xD;config: &amp;#39;english&amp;#39;&#xD;})&#xD;使用PostgreSQL的plainto_tsquery函数。&#xA;案例3 （全面归一化） link&#xD;使用方法&#xD;注意事项&#xD;const { data, error } = await supabase&#xD;.</description>
    </item>
  </channel>
</rss>
