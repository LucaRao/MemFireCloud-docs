<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>认证 on MemFire Cloud在线文档</title>
    <link>http://localhost:1313/docs/app/sdkdocs/wechatsdk/auth/</link>
    <description>Recent content in 认证 on MemFire Cloud在线文档</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    <lastBuildDate>Mon, 01 Jan 0001 00:00:00 +0000</lastBuildDate>
    <atom:link href="http://localhost:1313/docs/app/sdkdocs/wechatsdk/auth/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>概述</title>
      <link>http://localhost:1313/docs/app/sdkdocs/wechatsdk/auth/auth-api/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      <guid>http://localhost:1313/docs/app/sdkdocs/wechatsdk/auth/auth-api/</guid>
      <description>认证方法可以通过 supabase.auth 命名空间访问。&#xA;案例教程 link案例1 (创建认证客户端) link&#xD;import { createClient } from &amp;#39;supabase-wechat-stable-v2&amp;#39;&#xD;const supabase = createClient(supabase_url, anon_key)&#xD;案例2 （创建认证客户端 （服务器端）） link&#xD;import { createClient } from &amp;#39;supabase-wechat-stable-v2&amp;#39;&#xD;const supabase = createClient(supabase_url, anon_key, {&#xD;auth: {&#xD;autoRefreshToken: false,&#xD;persistSession: false,&#xD;detectSessionInUrl: false&#xD;}&#xD;})&#xD;入门指南 link&#xD;概述&#xA;每个认证系统都有认证和授权两个部分&#xA;重定向 URL&#xA;使用无密码登录或第三方提供程序时，MemFire Cloud 客户端库方法提供 redirectTo 参数，以指定身份验证后将用户重定向到的位置&#xA;原生移动端深度链接&#xA;在某些身份验证情况下，您需要处理链接回应用程序以完成用户登录&#xA;启用Captcha保护&#xA;Supabase为您提供了在登录、注册和密码重置表单中添加captcha的选项&#xA;速率限制&#xA;速率限制、资源分配和滥用预防&#xA;身份验证&#xA;提供邮件、短信、微信等多种认证方式&#xA;授权&#xA;行级别安全性&#xA;认证帮助程序&#xA;用于使用Supabase的特定于框架的Auth实用程序的集合&#xA;深层探索&#xA;JWTS、行级安全、GoTrue、Google Oauth</description>
    </item>
    <item>
      <title>signInWithWechat()</title>
      <link>http://localhost:1313/docs/app/sdkdocs/wechatsdk/auth/auth-signinwithwechat/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      <guid>http://localhost:1313/docs/app/sdkdocs/wechatsdk/auth/auth-signinwithwechat/</guid>
      <description>微信注册&#xA;使用 SDK 操作如下 link&#xD;wx.login({&#xD;success: async res =&amp;gt; {&#xD;const { data, error } = await supabase.auth.signInWithWechat({code:res.code})&#xD;},&#xD;})&#xD;参数 link&#xD;参数 类型 是否必填 说明 code String 是 使用wx.login成功后返回的code 返回参数 link&#xD;//请求成功返回正常用户信息&#xD;data: { session: Session | null; user: User | null }; error: null //请求出错，返回错误信息&#xD;data: { session: null; user: null }; error: AuthError 返回示例 linkdata结构如下： link&#xD;{&#xD;&amp;#34;access_token&amp;#34;:&amp;#34;eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9xxxxxxxxxxxxxxxxxxxxxxxx&amp;#34;,&#xD;&amp;#34;token_type&amp;#34;:&amp;#34;bearer&amp;#34;,&#xD;&amp;#34;expires_in&amp;#34;:3600,&#xD;&amp;#34;refresh_token&amp;#34;:&amp;#34;xxxxxxxxxxx&amp;#34;,&#xD;&amp;#34;user&amp;#34;:{&#xD;&amp;#34;id&amp;#34;:&amp;#34;xxxxxxxxxxxxx&amp;#34;,&#xD;&amp;#34;aud&amp;#34;:&amp;#34;authenticated&amp;#34;,&#xD;&amp;#34;role&amp;#34;:&amp;#34;authenticated&amp;#34;,&#xD;&amp;#34;email&amp;#34;:&amp;#34;&amp;#34;,&#xD;&amp;#34;phone&amp;#34;:&amp;#34;&amp;#34;,&#xD;&amp;#34;wechat_id&amp;#34;:&amp;#34;xxxxxxxxxxxxx&amp;#34;,&#xD;&amp;#34;wechat_unionid&amp;#34;:&amp;#34;&amp;#34;,&#xD;&amp;#34;last_sign_in_at&amp;#34;:&amp;#34;2023-03-13T02:47:38.</description>
    </item>
    <item>
      <title>signInWithWechat()</title>
      <link>http://localhost:1313/docs/app/sdkdocs/wechatsdk/auth/auth-wechatbindphone/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      <guid>http://localhost:1313/docs/app/sdkdocs/wechatsdk/auth/auth-wechatbindphone/</guid>
      <description>微信小程序用户登录后，通过该接口绑定该用户授权的微信手机号。&#xA;使用 SDK 操作如下 link&#xD;const { data, error } = await supabase.auth.wechatBindPhone({&#xD;code: &amp;#39;013fA51w3S8Ad03D0C3w31WiTT3fA51k&amp;#39;,&#xD;})&#xD;参数 link&#xD;参数 类型 是否必填 说明 code String 是 需要将 button 组件 open-type 的值设置为 getPhoneNumber，当用户点击并同意之后，可以通过 bindgetphonenumber 事件回调获取到动态令牌code，然后把code传到开发者后台，并在开发者后台调用微信后台提供的 phonenumber.getPhoneNumber 接口，消费code来换取用户手机号。每个code有效期为5分钟，且只能消费一次。 返回参数 link&#xD;//请求成功，返回用户信息&#xD;data: { user: User }; error: null //请求出错，返回错误信息&#xD;data: { user: null }; error: AuthError 返回示例 linkdata结构如下： link&#xD;{&#xD;&amp;#34;id&amp;#34;:&amp;#34;e38801c5xxxxxx&amp;#34;,&#xD;&amp;#34;aud&amp;#34;:&amp;#34;authenticated&amp;#34;,&#xD;&amp;#34;role&amp;#34;:&amp;#34;authenticated&amp;#34;,&#xD;&amp;#34;email&amp;#34;:&amp;#34;&amp;#34;,&#xD;&amp;#34;phone&amp;#34;:&amp;#34;131xxxxxx&amp;#34;,&#xD;&amp;#34;wechat_id&amp;#34;:&amp;#34;ok1s85Rxxxxxx&amp;#34;,&#xD;&amp;#34;wechat_unionid&amp;#34;:&amp;#34;&amp;#34;,&#xD;&amp;#34;last_sign_in_at&amp;#34;:&amp;#34;2023-03-13T08:37:51.308806Z&amp;#34;,&#xD;&amp;#34;app_metadata&amp;#34;:{&#xD;&amp;#34;provider&amp;#34;:&amp;#34;wechat_mini&amp;#34;,&#xD;&amp;#34;providers&amp;#34;:[&#xD;&amp;#34;wechat_mini&amp;#34;&#xD;]&#xD;},&#xD;&amp;#34;user_metadata&amp;#34;:{&#xD;&amp;#34;arvatar&amp;#34;:&amp;#34;http://tmp/z0dymKP81zu04f1fa14be668b52cd87aa12b759cf411.</description>
    </item>
    <item>
      <title>signInWithWechat()</title>
      <link>http://localhost:1313/docs/app/sdkdocs/wechatsdk/auth/auth-getunlimitedqrcode/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      <guid>http://localhost:1313/docs/app/sdkdocs/wechatsdk/auth/auth-getunlimitedqrcode/</guid>
      <description>生成指定小程序某页面的二维码，扫码后可以跳转到该小程序页面。&#xA;使用 SDK 操作如下 link&#xD;const { data, error } = await supabase.auth.getUnlimitedQRCode({&#xD;page: &amp;#34;pages/index/index&amp;#34;, // pageUrl，不能带参数，不能带最开始的 / scene: &amp;#34;root=123&amp;#34;, // 页面参数，字符串最大长度32字节，字符约束参考微信官方文档&#xD;check_path: true,&#xD;env_version: &amp;#34;trial&amp;#34;,&#xD;width: 430,&#xD;auto_color: false,&#xD;line_color: {&amp;#34;r&amp;#34;:0,&amp;#34;g&amp;#34;:0,&amp;#34;b&amp;#34;:0},&#xD;is_hyaline: false&#xD;})&#xD;参数 link&#xD;参数 类型 是否必填 说明 scene String 是 最大32个可见字符，只支持数字，大小写英文以及部分特殊字符：!#$&amp;amp;&amp;rsquo;()*+,/:;=?@-._~，其它字符请自行编码为合法字符（因不支持%，中文无法使用 urlencode 处理，请使用其他编码方式） page String 否 默认是主页，页面 page，例如 pages/index/index，根路径前不要填加 /，不能携带参数（参数请放在 scene 字段里），如果不填写这个字段，默认跳主页面。 check_path boolean 否 默认是true，检查page 是否存在，为 true 时 page 必须是已经发布的小程序存在的页面（否则报错）；为 false 时允许小程序未发布或者 page 不存在， 但page 有数量上限（60000个）请勿滥用。 env_version String 否 要打开的小程序版本。正式版为 &amp;ldquo;release&amp;rdquo;，体验版为 &amp;ldquo;trial&amp;rdquo;，开发版为 &amp;ldquo;develop&amp;rdquo;。默认是正式版。 width number 否 默认430，二维码的宽度，单位 px，最小 280px，最大 1280px auto_color boolean 否 自动配置线条颜色，如果颜色依然是黑色，则说明不建议配置主色调，默认 false line_color object 否 默认是{&amp;ldquo;r&amp;rdquo;:0,&amp;ldquo;g&amp;rdquo;:0,&amp;ldquo;b&amp;rdquo;:0} 。auto_color 为 false 时生效，使用 rgb 设置颜色 例如 {&amp;ldquo;r&amp;rdquo;:&amp;ldquo;xxx&amp;rdquo;,&amp;ldquo;g&amp;rdquo;:&amp;ldquo;xxx&amp;rdquo;,&amp;ldquo;b&amp;rdquo;:&amp;ldquo;xxx&amp;rdquo;} 十进制表示 is_hyaline boolean 否 默认是false，是否需要透明底色，为 true 时，生成透明底色的小程序 返回参数 link&#xD;//请求成功返回正常用户信息&#xD;data: { session: Session | null; user: User | null }; error: null //请求出错，返回错误信息&#xD;data: { session: null; user: null }; error: AuthError 返回示例 linkdata结构如下： link&#xD;{&#xD;&amp;#34;access_token&amp;#34;:&amp;#34;eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9xxxxxxxxxxxxxxxxxxxxxxxx&amp;#34;,&#xD;&amp;#34;token_type&amp;#34;:&amp;#34;bearer&amp;#34;,&#xD;&amp;#34;expires_in&amp;#34;:3600,&#xD;&amp;#34;refresh_token&amp;#34;:&amp;#34;xxxxxxxxxxx&amp;#34;,&#xD;&amp;#34;user&amp;#34;:{&#xD;&amp;#34;id&amp;#34;:&amp;#34;xxxxxxxxxxxxx&amp;#34;,&#xD;&amp;#34;aud&amp;#34;:&amp;#34;authenticated&amp;#34;,&#xD;&amp;#34;role&amp;#34;:&amp;#34;authenticated&amp;#34;,&#xD;&amp;#34;email&amp;#34;:&amp;#34;&amp;#34;,&#xD;&amp;#34;phone&amp;#34;:&amp;#34;&amp;#34;,&#xD;&amp;#34;wechat_id&amp;#34;:&amp;#34;xxxxxxxxxxxxx&amp;#34;,&#xD;&amp;#34;wechat_unionid&amp;#34;:&amp;#34;&amp;#34;,&#xD;&amp;#34;last_sign_in_at&amp;#34;:&amp;#34;2023-03-13T02:47:38.</description>
    </item>
    <item>
      <title>signInWithWechat()</title>
      <link>http://localhost:1313/docs/app/sdkdocs/wechatsdk/auth/auth-wechatbindaccount/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      <guid>http://localhost:1313/docs/app/sdkdocs/wechatsdk/auth/auth-wechatbindaccount/</guid>
      <description>该接口接受一个wx.login返回的code参数，通过code兑换openid等信息，并判断用户是否存在，已经存在会报错，不存在，则将该openid绑定到当前登录的账号上。 应用场景：小程序对应的web/app端先使用手机号+短信的方式注册的用户，在小程序端需要关联微信小程序账号，后续用户通过小程序或者短信方式都能登录到同一个账号下。使用条件，使用此接口之前，用户必须已经在小程序用手机号+短信的方式登录。&#xA;使用 SDK 操作如下 link&#xD;wx.login({&#xD;success: async res =&amp;gt; {&#xD;const { data, error } = await supabase.auth.wechatBindAccount({code:res.code})&#xD;},&#xD;})&#xD;参数 link&#xD;参数 类型 是否必填 说明 code String 是 使用wx.login成功后返回的code 返回参数 link&#xD;//请求成功返回正常用户信息&#xD;data: { session: Session | null; user: User | null }; error: null //请求出错，返回错误信息&#xD;data: { session: null; user: null }; error: AuthError 返回示例 linkdata结构如下： link&#xD;{&#xD;&amp;#34;access_token&amp;#34;:&amp;#34;eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9xxxxxxxxxxxxxxxxxxxxxxxx&amp;#34;,&#xD;&amp;#34;token_type&amp;#34;:&amp;#34;bearer&amp;#34;,&#xD;&amp;#34;expires_in&amp;#34;:3600,&#xD;&amp;#34;refresh_token&amp;#34;:&amp;#34;xxxxxxxxxxx&amp;#34;,&#xD;&amp;#34;user&amp;#34;:{&#xD;&amp;#34;id&amp;#34;:&amp;#34;2411981dxxxx&amp;#34;,&#xD;&amp;#34;aud&amp;#34;:&amp;#34;authenticated&amp;#34;,&#xD;&amp;#34;role&amp;#34;:&amp;#34;authenticated&amp;#34;,&#xD;&amp;#34;email&amp;#34;:&amp;#34;&amp;#34;,&#xD;&amp;#34;phone&amp;#34;:&amp;#34;131xxxx&amp;#34;,&#xD;&amp;#34;phone_confirmed_at&amp;#34;:&amp;#34;2023-03-13T02:53:37.</description>
    </item>
    <item>
      <title>updateUser()</title>
      <link>http://localhost:1313/docs/app/sdkdocs/wechatsdk/auth/auth-updateuser/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      <guid>http://localhost:1313/docs/app/sdkdocs/wechatsdk/auth/auth-updateuser/</guid>
      <description>updateUser()用于更新用户信息，该方法用于更新已登录用户的用户数据。&#xA;使用 updateUser() 方法之前，用户必须先登录。默认情况下，如果对用户的电子邮箱进行更新，这将向用户当前的电子邮箱和新的电子邮箱发送确认链接。 若希望仅向用户的新电子邮箱发送确认链接，请在项目的电子邮箱认证提供程序设置中禁用 Secure email change 选项。这样可以避免同时向当前和新电子邮箱发送确认链接。&#xA;案例教程 link案例1 （更新已认证用户的电子邮件地址） link&#xD;使用方法&#xD;注意事项&#xD;const { data, error } = await supabase.auth.updateUser({email: &amp;#39;new@email.com&amp;#39;})&#xD;发送一封“确认电子邮件更改”邮件至新的电子邮件地址。&#xA;案例2 （更新已认证用户的密码） link&#xD;使用方法&#xD;注意事项&#xD;const { data, error } = await supabase.auth.updateUser({password: &amp;#39;new password&amp;#39;})&#xD;如果密码超过72个字符，它将被截断为前72个字符。&#xA;案例3 （更新用户的元数据信息） link&#xD;使用方法&#xD;const { data, error } = await supabase.auth.updateUser({&#xD;data: { hello: &amp;#39;world&amp;#39; }&#xD;})&#xD;案例4 （使用一次性随机码更新用户的密码） link&#xD;使用方法&#xD;注意事项&#xD;const { data, error } = await supabase.</description>
    </item>
    <item>
      <title>signUp()</title>
      <link>http://localhost:1313/docs/app/sdkdocs/wechatsdk/auth/auth-signup/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      <guid>http://localhost:1313/docs/app/sdkdocs/wechatsdk/auth/auth-signup/</guid>
      <description>创建一个新的用户。&#xA;默认情况下，用户在登录之前需要验证他们的电子邮件地址。要关闭此功能，请在您的项目中禁用 确认电子邮 选项。&#xA;确认电子邮件 决定用户在注册后是否需要确认他们的电子邮件地址。&#xA;如果启用了 确认电子邮件 ，将返回一个用户对象，但会话 (session) 为空。&#xA;如果禁用了 确认电子邮 ，将返回一个用户对象和一个会话 (session)。&#xA;当用户确认他们的电子邮件地址时，默认情况下会重定向到 SITE_URL。您可以在项目中修改 SITE_URL 或在你的项目中添加其他重定向 URL。&#xA;如果对已确认的现有用户调用 signUp()：&#xA;如果您的项目中启用了 确认电子邮件 ，将返回一个混淆的（假的）的用户对象。 如果禁用了 确认电子邮件 ，将返回错误消息用户已注册。 要获取当前已登录的用户，请参阅 getUser() 方法。 案例教程 link案例1 （注册） link&#xD;使用方法&#xD;注意事项&#xD;const { data, error } = await supabase.auth.signUp({&#xD;email: &amp;#39;example@email.com&amp;#39;,&#xD;password: &amp;#39;example-password&amp;#39;,&#xD;})&#xD;如果密码超过72个字符，它将被截断为前72个字符。&#xA;案例2 （使用附加用户元数据进行注册） link&#xD;使用方法&#xD;const { data, error } = await supabase.auth.signUp(&#xD;{&#xD;email: &amp;#39;example@email.com&amp;#39;,&#xD;password: &amp;#39;example-password&amp;#39;,&#xD;options: {&#xD;data: {&#xD;first_name: &amp;#39;John&amp;#39;,&#xD;age: 27,&#xD;}&#xD;}&#xD;}&#xD;)&#xD;案例3 （使用重定向URL进行注册） link&#xD;使用方法&#xD;注意事项&#xD;const { data, error } = await supabase.</description>
    </item>
    <item>
      <title>signInWithPassword()</title>
      <link>http://localhost:1313/docs/app/sdkdocs/wechatsdk/auth/auth-signinwithpassword/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      <guid>http://localhost:1313/docs/app/sdkdocs/wechatsdk/auth/auth-signinwithpassword/</guid>
      <description>你可以使用电子邮件和密码或者手机号码和密码来登录已存在的用户账户。登录时必须提供以下其中一种组合：&#xA;电子邮件和密码：输入用户注册时使用的电子邮件地址和相应的密码进行登录。 手机号码和密码：输入用户注册时使用的手机号码和相应的密码进行登录。 案例教程 link案例1 （使用电子邮件和密码登录） link&#xD;使用方法&#xD;const { data, error } = await supabase.auth.signInWithPassword({&#xD;email: &amp;#39;example@email.com&amp;#39;,&#xD;password: &amp;#39;example-password&amp;#39;,&#xD;})&#xD;案例2 （使用手机号码和密码登录） link&#xD;使用方法&#xD;const { data, error } = await supabase.auth.signInWithPassword({&#xD;phone: &amp;#39;&amp;#43;13334445555&amp;#39;,&#xD;password: &amp;#39;some-password&amp;#39;,&#xD;})&#xD;// After receiving a SMS with a OTP.&#xD;const { data, error } = await supabase.auth.verifyOtp({&#xD;phone: &amp;#39;&amp;#43;13334445555&amp;#39;,&#xD;token: &amp;#39;123456&amp;#39;,&#xD;})&#xD;参数说明 link&#xD;credentials&#xD;[必要参数]&#xD;SignUpWithPasswordCredentials SignUpWithPasswordCredentials是使用密码进行身份验证的一种凭据类型。通常包含以下信息：&#xA;1.email（电子邮件）：用户的电子邮件地址，作为账户的唯一标识符之一。&#xA;2.password（密码）：用户选择的密码，用于以后登录时进行身份验证。&#xA;3.可能还包含其他一些相关的字段，例如用户名、手机号码或其他自定义的用户信息。</description>
    </item>
    <item>
      <title>signInWithOtp()</title>
      <link>http://localhost:1313/docs/app/sdkdocs/wechatsdk/auth/auth-signinwithotp/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      <guid>http://localhost:1313/docs/app/sdkdocs/wechatsdk/auth/auth-signinwithotp/</guid>
      <description>使用魔法链接（Magiclink）或一次性密码（OTP）登录用户，需要提供电子邮件或手机号码中的任意一种。&#xA;这个方法用于无需密码的登录，其中一次性密码（OTP）将发送到用户的电子邮件或手机号码。 如果用户不存在，signInWithOtp() 将代替其进行用户注册。要限制此行为，您可以将 SignInWithPasswordlessCredentials.options 中的 shouldCreateUser 设置为 false。&#xA;如果您使用电子邮件，您可以配置是否要向用户发送魔法链接或一次性密码（OTP）。&#xA;如果您使用手机号码，您可以配置是否要向用户发送一次性密码（OTP）。&#xA;魔法链接的目标URL由 SITE_URL 决定。请查看重定向URL和通配符以向您的项目添加其他重定向URL。&#xA;魔法链接和OTP共享相同的实现。若要向用户发送一次性密码（OTP）而不是魔法链接，请修改魔法链接的电子邮件模板，将 {{ .ConfirmationURL }} 替换为 {{ .Token }}。&#xA;案例教程 link案例1 （使用电子邮件登录） link&#xD;使用方法&#xD;注意事项&#xD;const { data, error } = await supabase.auth.signInWithOtp({&#xD;email: &amp;#39;example@email.com&amp;#39;,&#xD;options: {&#xD;emailRedirectTo: &amp;#39;https://example.com/welcome&amp;#39;&#xD;}&#xD;})&#xD;用户将收到一封电子邮件，其中包含魔法链接或者一次性密码（OTP）亦或是两者都有。默认情况下，同一用户在60秒内只能请求一次一次性密码（OTP）。&#xA;案例2 （使用短信OTP登陆） link&#xD;使用方法&#xD;注意事项&#xD;const { data, error } = await supabase.auth.signInWithOtp({&#xD;phone: &amp;#39;&amp;#43;13334445555&amp;#39;,&#xD;})&#xD;用户将收到一条包含一次性密码（OTP）的短信。默认情况下，同一用户在60秒内只能请求一次一次性密码（OTP）。&#xA;案例3 （使用WhatsApp OTP登录） link&#xD;使用方法&#xD;注意事项&#xD;const { data, error } = await supabase.</description>
    </item>
    <item>
      <title>signInWithOAuth()</title>
      <link>http://localhost:1313/docs/app/sdkdocs/wechatsdk/auth/auth-signinwithoauth/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      <guid>http://localhost:1313/docs/app/sdkdocs/wechatsdk/auth/auth-signinwithoauth/</guid>
      <description>通过第三方服务商登录现有的用户。&#xA;该方法用于使用第三方服务商进行登录。&#xA;MemFire Cloud支持许多不同的第三方服务商。&#xA;案例教程 link案例1 （借助第三方服务商登陆） link&#xD;使用方法&#xD;const { data, error } = await supabase.auth.signInWithOAuth({&#xD;provider: &amp;#39;github&amp;#39;&#xD;})&#xD;案例2 （使用带有重定向的第三方服务商登录） link&#xD;使用方法&#xD;注意事项&#xD;const { data, error } = await supabase.auth.signInWithOAuth({&#xD;provider: &amp;#39;github&amp;#39;,&#xD;options: {&#xD;redirectTo: &amp;#39;https://example.com/welcome&amp;#39;&#xD;}&#xD;})&#xD;当第三方服务商成功验证用户后，服务商将用户重定向到redirectTo参数指定的URL。默认情况下，该参数为SITE_URL。调用此方法后不会立即重定向用户。&#xA;请查看重定向URL和通配符以向您的项目添加其他重定向URL。&#xA;案例3 （带有作用域(scopes)的登录） link&#xD;使用方法&#xD;注意事项&#xD;const { data, error } = await supabase.auth.signInWithOAuth({&#xD;provider: &amp;#39;github&amp;#39;,&#xD;options: {&#xD;scopes: &amp;#39;repo gist notifications&amp;#39;&#xD;}&#xD;})&#xD;const oAuthToken = data.session.provider_token // use to access provider API&#xD;如果你需要从OAuth服务商获取附加数据，你可以在请求中包含一个以空格分隔的作用域（scopes）列表，以获得OAuth服务商令牌。</description>
    </item>
    <item>
      <title>signOut()</title>
      <link>http://localhost:1313/docs/app/sdkdocs/wechatsdk/auth/auth-signout/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      <guid>http://localhost:1313/docs/app/sdkdocs/wechatsdk/auth/auth-signout/</guid>
      <description>在浏览器中，signOut() 方法将会从浏览器会话中移除已登录的用户，并让他们退出登陆。&#xA;清除所有本地存储项，然后触发一个 SIGNED_OUT事件。 为了使用 signOut() 方法，用户首先需要完成登录操作。 案例教程 link案例1 link&#xD;使用方法&#xD;const { error } = await supabase.auth.signOut()&#xD;</description>
    </item>
    <item>
      <title>通过 OTP 进行验证和登录</title>
      <link>http://localhost:1313/docs/app/sdkdocs/wechatsdk/auth/auth-verifyotp/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      <guid>http://localhost:1313/docs/app/sdkdocs/wechatsdk/auth/auth-verifyotp/</guid>
      <description>用户通过手机接收到的 OTP（一次性密码） 来登录。&#xA;verifyOtp 方法接受不同的验证类型。如果使用手机号码，类型可以是 sms 或 phone_change。 如果使用电子邮件地址，类型可以是以下之一：email、recovery、invite 或 email_change（signup 和 magiclink 类型已被弃用）。&#xA;应根据在调用 verifyOtp 之前使用的相应身份验证方法来确定使用的验证类型，以便进行用户的注册或登录操作。&#xA;案例教程 link案例1 （验证短信一次性密码） link&#xD;使用方法&#xD;const { data, error } = await supabase.auth.verifyOtp({ phone, token, type: &amp;#39;sms&amp;#39;})&#xD;案例2 （验证注册一次性密码） link&#xD;使用方法&#xD;const { data, error } = await supabase.auth.verifyOtp({ email, token, type: &amp;#39;signup&amp;#39;})&#xD;参数说明 link&#xD;params&#xD;[必要参数]&#xD;VerifyOtpParams&#xD;</description>
    </item>
    <item>
      <title>getSession()</title>
      <link>http://localhost:1313/docs/app/sdkdocs/wechatsdk/auth/auth-getsession/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      <guid>http://localhost:1313/docs/app/sdkdocs/wechatsdk/auth/auth-getsession/</guid>
      <description>getSession()用于检索会话信息，返回会话，并在必要时进行刷新。这意味着如果需要，会话会被刷新后返回。 如果未检测到会话，返回的会话可能为 空（null），这可能发生在用户未登录或已退出登陆的情况下。&#xA;这个方法用于检索当前的本地会话（即本地存储）。 当会话的访问令牌过期时，该方法会使用刷新令牌来获取一个新的会话。 案例教程 link案例1 （获取会话数据） link&#xD;使用方法&#xD;const { data, error } = await supabase.auth.getSession()&#xD;</description>
    </item>
    <item>
      <title>refreshSession()</title>
      <link>http://localhost:1313/docs/app/sdkdocs/wechatsdk/auth/auth-refreshsession/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      <guid>http://localhost:1313/docs/app/sdkdocs/wechatsdk/auth/auth-refreshsession/</guid>
      <description>refreshSession()用于获取新的会话，无论会话是否已过期，都将返回一个新的会话。该方法接受一个可选的当前会话作为参数。如果未传入当前会话，那么 refreshSession() 方法将尝试从 getSession() 方法中获取当前会话。 如果当前会话的刷新令牌无效，将抛出一个错误。&#xA;该方法将刷新并返回一个新的会话，无论当前会话是否已过期。 案例教程 link案例1 （使用当前会话刷新会话） link&#xD;使用方法&#xD;const { data: { user, session }, error } = await supabase.auth.refreshSession()&#xD;案例2 （使用传入的会话刷新会话） link&#xD;使用方法&#xD;const { data: { user, session }, error } = await supabase.auth.refreshSession({ refresh_token })&#xD;参数说明 link&#xD;currentSession&#xD;[可选参数]&#xD;object类型&#xD;当前会话的信息。如果传入了这个参数，则必须包含一个刷新令牌。&#xA;特性&#xD;刷新令牌（refresh_token）&#xD;[必要参数]&#xD;string类型&#xD;</description>
    </item>
    <item>
      <title>getUser()</title>
      <link>http://localhost:1313/docs/app/sdkdocs/wechatsdk/auth/auth-getuser/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      <guid>http://localhost:1313/docs/app/sdkdocs/wechatsdk/auth/auth-getuser/</guid>
      <description>getUser()用于获取用户信息，当存在有效会话时，该方法获取当前用户的详细信息。&#xA;与从本地会话获取信息不同，该方法从数据库中获取用户对象的信息。 这个方法非常有用，因为它能够验证用户的访问令牌（JWT）在服务器端是否有效，从而用于检查用户是否已被授权。 建议仅在需要最新的用户数据时使用此方法。对于更快的结果，推荐使用 getSession().session.user。这是因为 getSession().session.user 直接从本地会话获取数据速度较快。而 Retrieve a user 方法需要从数据库中获取数据会稍慢一些。 案例教程 link案例1 （通过当前现有的会话获取已登录的用户信息） link&#xD;使用方法&#xD;const { data: { user } } = await supabase.auth.getUser()&#xD;案例2 （使用自定义访问令牌 jwt 获取已登录的用户信息） link&#xD;使用方法&#xD;const { data: { user } } = await supabase.auth.getUser(jwt)&#xD;参数说明 link&#xD;jwt&#xD;[可选参数]&#xD;string类型&#xD;接收一个可选的访问令牌jwt。如果没有提供jwt，getUser()将试图从当前会话中获取jwt。</description>
    </item>
    <item>
      <title>setSession()</title>
      <link>http://localhost:1313/docs/app/sdkdocs/wechatsdk/auth/auth-setsession/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      <guid>http://localhost:1313/docs/app/sdkdocs/wechatsdk/auth/auth-setsession/</guid>
      <description>setSession()函数的主要目的，是用于设置当前会话的会话数据。 当用户登录或进行其他需要会话数据的操作时，可以使用setSession()函数来更新或设置相关的会话信息。&#xA;如果当前会话已过期，setSession()将负责刷新它以获取新的会话 如果当前会话中的刷新令牌或访问令牌无效，将会抛出错误 setSession()函数需要一个刷新令牌作为参数，然后利用这个刷新令牌来获取一个新的会话。刷新令牌是用于更新会话数据的重要凭证。&#xA;刷新令牌是单次使用的，一旦被用来获取新的会话后，就会失效。&#xA;为了保护系统免受重放攻击，所有项目默认启用刷新令牌轮换功能。重放攻击是指攻击者通过重复使用先前获取的令牌来模拟合法用户的行为，从而进行未经授权的操作。&#xA;为了灵活性，MemFire Cloud允许你配置REFRESH_TOKEN_REUSE_INTERVAL，这是一个时间窗口，在这个窗口内，相同的刷新令牌可以在并发或离线问题的情况下多次使用。&#xA;案例教程 link案例1 （刷新对话） link&#xD;使用方法&#xD;注意事项&#xD;const { data, error } = supabase.auth.setSession({&#xD;access_token,&#xD;refresh_token&#xD;})&#xD;使用 refresh_token 设置会话数据，并返回当前会话状态；若 refresh_token 无效，则返回错误信息。&#xA;参数说明 link&#xD;当前会话（currentSession）&#xD;[必要参数]&#xD;object类型&#xD;当前的会话，它至少包含一个访问令牌和刷新令牌。&#xA;特性&#xD;刷新令牌（refresh_token）&#xD;[必要参数]&#xD;string类型&#xD;访问令牌（access_token）&#xD;[必要参数]&#xD;string类型&#xD;</description>
    </item>
    <item>
      <title>onAuthStateChange()</title>
      <link>http://localhost:1313/docs/app/sdkdocs/wechatsdk/auth/auth-onauthstatechange/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      <guid>http://localhost:1313/docs/app/sdkdocs/wechatsdk/auth/auth-onauthstatechange/</guid>
      <description>onAuthStateChange()用于监听认证事件，接收每次认证事件发生时的通知。&#xA;认证事件类型： SIGNED_IN（登录）、SIGNED_OUT（登出）、TOKEN_REFRESHED（令牌刷新）、USER_UPDATED（用户信息更新）、PASSWORD_RECOVERY（密码恢复） 然而目前使用 onAuthStateChange() 方法在不同的标签页之间无效。 举例来说，在密码重置流程中，如果用户在一个标签页请求密码重置链接，当用户点击链接时，原始的标签页将无法收到SIGNED_IN（登录）和PASSWORD_RECOVERY（密码恢复）事件。 案例教程 link案例1 （监听认证变化） link&#xD;使用方法&#xD;supabase.auth.onAuthStateChange((event, session) =&amp;gt; {&#xD;console.log(event, session)&#xD;})&#xD;案例2 （监听密码恢复事件） link&#xD;使用方法&#xD;supabase.auth.onAuthStateChange((event, session) =&amp;gt; {&#xD;if (event == &amp;#39;PASSWORD_RECOVERY&amp;#39;) {&#xD;console.log(&amp;#39;PASSWORD_RECOVERY&amp;#39;, session)&#xD;// show screen to update user&amp;#39;s password&#xD;showPasswordResetScreen(true)&#xD;}&#xD;})&#xD;案例3 （监听登录） link&#xD;使用方法&#xD;supabase.auth.onAuthStateChange((event, session) =&amp;gt; {&#xD;if (event == &amp;#39;SIGNED_IN&amp;#39;) console.log(&amp;#39;SIGNED_IN&amp;#39;, session)&#xD;})&#xD;案例4 （监听退出登录） link&#xD;使用方法&#xD;supabase.auth.onAuthStateChange((event, session) =&amp;gt; {&#xD;if (event == &amp;#39;SIGNED_OUT&amp;#39;) console.</description>
    </item>
    <item>
      <title>resetPasswordForEmail()</title>
      <link>http://localhost:1313/docs/app/sdkdocs/wechatsdk/auth/auth-resetpasswordforemail/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      <guid>http://localhost:1313/docs/app/sdkdocs/wechatsdk/auth/auth-resetpasswordforemail/</guid>
      <description>resetPasswordForEmail() 方法会向一个电子邮件地址发送密码重置请求。&#xA;密码重置流程包含两个主要步骤：1. 允许用户通过密码重置链接登录。2. 更新用户的密码。&#xA;resetPasswordForEmail() 方法仅会向用户的电子邮件发送密码重置链接。若要更新用户的密码，请参阅 updateUser() 方法。&#xA;当密码恢复链接被点击时，会触发一个 SIGNED_IN 和 PASSWORD_RECOVERY 事件。你可以使用 onAuthStateChange() 方法来监听这些事件，并在其上调用一个回调函数。&#xA;当用户点击邮件中的重置链接后，他们将被重定向回您的应用程序。您可以通过 redirectTo 参数配置用户重定向的URL。请参阅重定向URL和通配符，以添加其他重定向URL到您的项目中。&#xA;成功重定向用户后，提示他们输入一个新密码并调用 updateUser() ，使用方法如下：&#xA;const { data, error } = await supabase.auth.updateUser({&#xD;password: new_password&#xD;})&#xD;案例教程 link案例1 （重置密码） link&#xD;使用方法&#xD;const { data, error } = await supabase.auth.resetPasswordForEmail(email, {&#xD;redirectTo: &amp;#39;https://example.com/update-password&amp;#39;,&#xD;})&#xD;案例2 （重置密码（React）） link&#xD;使用方法&#xD;/**&#xD;* Step 1: Send the user an email to get a password reset token.&#xD;* This email contains a link which sends the user back to your application.</description>
    </item>
  </channel>
</rss>
