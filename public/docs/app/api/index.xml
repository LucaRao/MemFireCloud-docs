<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>无服务器API on My New Hugo Site</title>
    <link>http://localhost:1313/docs/app/api/</link>
    <description>Recent content in 无服务器API on My New Hugo Site</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    <lastBuildDate>Mon, 01 Jan 0001 00:00:00 +0000</lastBuildDate>
    <atom:link href="http://localhost:1313/docs/app/api/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>概述</title>
      <link>http://localhost:1313/docs/app/api/api/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      <guid>http://localhost:1313/docs/app/api/api/</guid>
      <description>无服务器 API linkSupabase直接从你的数据库模式中自动生成三种类型的API。&#xA;REST - 通过restful接口连接到你的数据库。 Realtime - 监听数据库的变化。 GraphQL - 使用类似于图形查询语言操作您的数据库。 所有的API都是从您的数据库中自动生成的，其设计目的是让您无需编写一行代码就能尽可能快地构建。&#xA;您可以直接从浏览器中使用它们（两层架构），或者作为您自己的API服务器（三层架构）的补充。&#xA;特征 link 即时自动生成当您更新数据库时，可以通过API立即访问更改。&#xA;自我记录Supabase在Dashboard中生成文档，当您更改数据库时，这些文档会更新。&#xA;安全API配置为与PostgreSQL的行级安全一起工作，在启用密钥验证的API网关后面提供。&#xA;速度快我们的基本读取基准比Firebase快300%以上。API是Postgres之上的一个非常薄的层，它完成了大部分繁重的工作。&#xA;可扩展API可以同时处理数千个请求，并且适用于无服务器工作负载。&#xA;REST API [#rest-api-overview] linkSupabase使用 PostgREST 提供了一个RESTful API。这是在 Postgres 之上的一个非常薄的API层。 它提供了你在 CRUD API 中需要的一切。&#xA;Supabase的REST接口会自动根据你的数据库模式进行反射，并提供以下功能支持：&#xA;基本的CRUD操作（创建/读取/更新/删除） 深度嵌套的连接，允许你在一次获取中从多个表中获取数据 可以与Postgres视图一起使用 可以与Postgres函数一起使用 可以与Postgres的安全模型一起使用（包括行级安全、角色和授权） Supabase的REST API将所有请求解析为单个SQL语句，从而实现快速的响应时间和高吞吐量。&#xA;参考:&#xA;相关文档 开源代码 GraphQL API [#graphql-api-overview] linkSupabase使用 pg_graphql 来在 https://&amp;lt;project_ref&amp;gt;.supabase.co/graphql/v1/ 上公开GraphQL API端点。 您可以在控制台中自动检索和查询现有 Supabase项目的 GraphQL API，或手动导航到 API 文档 &amp;gt; GraphQL &amp;gt; GraphiQL。&#xA;Supabase的GraphQL接口会自动根据你的数据库模式进行反射，并提供以下功能支持：&#xA;基本的CRUD操作（创建/读取/更新/删除） 支持表、视图、材料化视图和外部表 表/视图之间任意深度的关联关系 用户定义的计算字段 Postgres安全模型（包括行级安全、角色和授权） GraphQL API在单个往返中解析所有请求，因此响应时间快且吞吐量高。</description>
    </item>
    <item>
      <title>2 分钟构建 API 路由</title>
      <link>http://localhost:1313/docs/app/api/quickstart/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      <guid>http://localhost:1313/docs/app/api/quickstart/</guid>
      <description>我们将创建一个名为 todos 的数据库表来存储任务。这将创建一个相应的 API 路由 /rest/v1/todos，该路由可以接收 GET， POST， PATCH， 和 DELETE 请求。&#xA;开始使用 link所有的API都是由数据库表自动创建的。在你向数据库添加了表或函数后，你可以使用所提供的API。&#xA;创建API路由 link当你创建Postgres表、视图或函数时，会自动创建API路由。&#xA;让我们通过创建一个叫做todos的表来存储任务，来创建我们的第一个API路由。 这将创建一个相应的路由todos，它可以接受GET、POST、PATCH和DELETE请求。&#xA;Dashboard&#xD;SQL&#xD;进入仪表板中的表编辑器页面。 点击新表，创建一个名为todos的表。 单击保存。 点击新列，创建一个名为task的列，类型为text。 单击保存。 -- Create a table called &amp;#34;todos&amp;#34; with a column to store tasks.&#xD;create table todos (&#xD;id bigint generated by default as identity primary key,&#xD;task text check (char_length(task) &amp;gt; 3)&#xD;);&#xD;API URL和密钥 link每个Supabase项目都有一个独特的API URL。您的 API 在 API 网关后面是安全的，每次请求都需要一个 API 密钥。&#xA;转到仪表板中的设置页面。 单击侧栏中的 API。 在这个页面上找到你的APIURL、anon和service_role键。 REST API和GraphQL API都可以通过这个URL访问:</description>
    </item>
    <item>
      <title>生成类型</title>
      <link>http://localhost:1313/docs/app/api/generating-types/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      <guid>http://localhost:1313/docs/app/api/generating-types/</guid>
      <description>SubaseAPI是从数据库生成的，这意味着我们可以使用数据库来生成类型安全的API定义。&#xA;使用Suabase CLI生成类型 linkSuabase CLI是一个二进制Go应用程序，它提供了设置本地开发环境所需的一切。&#xA;你可以通过npm或其他支持的软件包管理器安装CLI。CLI的最低要求版本是v1.8.1。&#xA;npm i supabase@&amp;#34;&amp;gt;=1.8.1&amp;#34; --save-dev&#xD;用你的个人访问令牌登录:&#xA;npx supabase login&#xD;为你的项目生成类型，产生types/supabase.ts文件:&#xA;npx supabase gen types typescript --project-id &amp;#34;$PROJECT_ID&amp;#34; --schema public &amp;gt; types/supabase.ts&#xD;在你生成了你的类型后，你可以在src/index.ts中使用它们.&#xA;import { NextApiRequest, NextApiResponse } from &amp;#39;next&amp;#39;&#xD;import { createClient } from &amp;#39;@supabase/supabase-js&amp;#39;&#xD;import { Database } from &amp;#39;../types/supabase&amp;#39;&#xD;const supabase = createClient&amp;lt;Database&amp;gt;(&#xD;process.env.NEXT_PUBLIC_SUPABASE_URL,&#xD;process.env.SUPABASE_SECRET_KEY&#xD;)&#xD;export default async (req: NextApiRequest, res: NextApiResponse) =&amp;gt; {&#xD;const allOnlineUsers = await supabase.from(&amp;#39;users&amp;#39;).select(&amp;#39;*&amp;#39;).eq(&amp;#39;status&amp;#39;, &amp;#39;ONLINE&amp;#39;)&#xD;res.status(200).json(allOnlineUsers)&#xD;}&#xD;用GitHub动作自动更新类型 link让你的类型定义与数据库保持同步的一个方法是设置一个GitHub动作，按计划运行。</description>
    </item>
    <item>
      <title>GraphQL 介绍</title>
      <link>http://localhost:1313/docs/app/api/graphiql/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      <guid>http://localhost:1313/docs/app/api/graphiql/</guid>
      <description>每个 Supabase 项目都有一个 GraphQL 端点： https://&amp;lt;project_ref&amp;gt;.supabase.co/graphql/v1。&#xA;这个端点与任何能够传递 apikey 首部的 GraphiQL 实现兼容。 以下是一些建议的应用程序：&#xA;paw.cloud insomnia.rest postman.com/graphql 自托管的 GraphiQL：GraphiQL 可以通过一个简单的 HTML 文件进行提供。有关详细信息，请参阅此讨论 </description>
    </item>
    <item>
      <title>使用Postman访问数据</title>
      <link>http://localhost:1313/docs/app/api/postman/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      <guid>http://localhost:1313/docs/app/api/postman/</guid>
      <description>MemFire Cloud为所有的数据表提供自动即时的API，我们可以通过Postman工具调用API来访问云数据库中数据表的数据。&#xA;前置条件 link① 注册MemFire Cloud账号；&#xA;② 存在已创建好的应用；&#xA;操作步骤 link1.创建数据表，插入数据 link在我的应用管理页面，点击具体应用，进入应用详情页面，点击左侧菜单栏“SQL执行器”，创建新查询，执行如下SQL命令。&#xA;SQL语法如下：&#xA;CREATE TABLE employees (&#xD;employee_no integer PRIMARY KEY,&#xD;name text UNIQUE,&#xD;department text NOT NULL&#xD;);&#xD;INSERT INTO employees VALUES (1, &amp;#39;lining&amp;#39;, &amp;#39;Marketing&amp;#39;),&#xD;(2, &amp;#39;lisan&amp;#39;, &amp;#39;Sales&amp;#39;),&#xD;(3, &amp;#39;zhangqi&amp;#39;, &amp;#39;Operations&amp;#39;); 2.使用API文档 link点击左侧菜单栏“API文档”，在“表和视图”里，选中所有数据表中的“employees”，右侧点击&amp;quot;Bash&amp;quot;栏，应用API key选择“anon(public)”, 则可以查看该数据表的专属API接口文档。&#xA;3.访问数据 link接下来读取该数据表“employees&amp;quot;中所有的行。&#xA;1.首先，我们在拖动文档滚动条，找到该操作的命令，如下图所示。我们可以直接获取到命令的URL信息、apikey和Authorization。&#xA;2.打开Postman工具，新建一个请求窗口，复制url并将其粘贴到请求里，请求方式选择GET，查询参数是“*”（查询全部）。配置请求Headers,将apikey和Authorization配置到请求头里面。完成配置后，点击“Send”按钮，即可获得返回结果。&#xA;4.插入数据 link接下来插入数据到数据表“employees&amp;quot;中。&#xA;1.首先，拖动文档滚动条，找到插入数据的API命令，如下图所示。可以获取到命令的URL信息、apikey和Authorization。&#xA;在Postman工具，新建一个请求窗口，请求方式选择POST，复制url并将其粘贴到请求里，配置Headers。同时在Body里面配置需要插入的数据。 3.点击“Send”按钮，返回状态码201，插入数据操作成功。&#xA;4.执行第3小节访问数据操作，即可看到新插入的数据。&#xA;5.设置RLS, 访问数据 link数据表里的RLS默认是不开启的，此时注册应用的用户是可以增删改查数据表中任何数据。接下来展示如何采用RLS来设置表的访问权限，允许经过身份验证的用户来访问数据表。&#xA;1.在用户认证-&amp;gt;策略页面，选中数据表“employees&amp;quot;，点击“启用RLS”按钮后，即可开启该数据库的RLS规则。允许经过身份验证的用户进行数据插入访问数据表。&#xA;2.接下来，给表设置访问规则，只允许经过身份验证的用户才能去插入数据。这只是其中一种规则，具体规则还得根据大家的业务需求规定。&#xA;（1）只允许经过身份验证的用户才能去插入数据。&#xA;（2）允许所有用户访问数据表。&#xA;SQL语法：&#xA;CREATE POLICY &amp;#34;Enable insert for authenticated users only&amp;#34; ON &amp;#34;public&amp;#34;.</description>
    </item>
    <item>
      <title>使用cURL工具访问数据</title>
      <link>http://localhost:1313/docs/app/api/curl/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      <guid>http://localhost:1313/docs/app/api/curl/</guid>
      <description>除了API方式外，MemFire Cloud在线文档提供cURL命令来访问云数据库中的数据~&#xA;备注说明：cURL是一个命令行工具（客户端（Client）URL工具），通过指定的URL来上传或下载数据，并将数据展示出来。cURL功能非常强大，熟练的话可以取代Postman 这一类的图形界面工具。&#xA;前置条件 link① 注册MemFire Cloud账号；&#xA;② 存在已创建好的应用；&#xA;③ 完成建表操作，且有写入数据；&#xA;操作步骤 link1.使用API文档 link在我的应用管理页面，点击具体应用，进入应用详情页面，点击左侧菜单栏“API文档”。选中所有数据表中的“employees”，右侧点击&amp;quot;Bash&amp;quot;栏，应用API key选择“公开(anno)”, 则会出现上图所示的该数据表的专属文档。&#xA;2.访问数据 link打开Bash编译器，复制上图中的读取所有行数据命令，粘贴到编译器里，回车即可查询employees数据表的所有数据。</description>
    </item>
    <item>
      <title>开始使用</title>
      <link>http://localhost:1313/docs/app/api/securing-your-api/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      <guid>http://localhost:1313/docs/app/api/securing-your-api/</guid>
      <description>开始使用 link所有的API都是由数据库表自动创建的。在你向数据库添加了表或函数后，你可以使用所提供的API。&#xA;创建API路由 link当你创建Postgres表、视图或函数时，会自动创建API路由。&#xA;让我们通过创建一个叫做todos的表来存储任务，来创建我们的第一个API路由。 这将创建一个相应的路由todos，它可以接受GET、POST、PATCH和DELETE请求。&#xA;Dashboard&#xD;SQL&#xD;进入仪表板中的表编辑器页面。 点击新表，创建一个名为todos的表。 单击保存。 点击新列，创建一个名为task的列，类型为text。 单击保存。 -- Create a table called &amp;#34;todos&amp;#34; with a column to store tasks.&#xD;create table todos (&#xD;id bigint generated by default as identity primary key,&#xD;task text check (char_length(task) &amp;gt; 3)&#xD;);&#xD;API URL和密钥 link每个Supabase项目都有一个独特的API URL。您的 API 在 API 网关后面是安全的，每次请求都需要一个 API 密钥。&#xA;转到仪表板中的设置页面。 单击侧栏中的 API。 在这个页面上找到你的APIURL、anon和service_role键。 REST API和GraphQL API都可以通过这个URL访问:&#xA;REST: https://&amp;lt;project_ref&amp;gt;.supabase.co/rest/v1 GraphQL: https://&amp;lt;project_ref&amp;gt;.supabase.co/graphql/v1 这两重路由都需要通过apikey标头来传递anon密钥。&#xA;API密钥 link您将获得两个密钥：&#xA;一个anon 密钥, 在浏览器环境下使用是安全的。</description>
    </item>
    <item>
      <title>创建 API 路由</title>
      <link>http://localhost:1313/docs/app/api/creating-routes/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      <guid>http://localhost:1313/docs/app/api/creating-routes/</guid>
      <description>当您创建Postgres表、视图或函数时，会自动创建API路由。&#xA;创建一个表 link我们通过创建一个名为 todos 的表来创建我们的第一个 API 路由，用于存储任务。 这个操作将创建一个相应的路由 todos ，它可以接受 GET, POST, PATCH, 和 DELETE 请求。&#xA;控制台&#xD;SQL&#xD;在控制台找到表编辑器页面。 点击 新建表 创建一个表命名为 todos. 点击 保存. 点击 插入列 创建一个名为task，text类型的列。 点击 保存。 -- Create a table called &amp;#34;todos&amp;#34; with a column to store tasks.&#xD;create table&#xD;todos (&#xD;id bigint generated by default as identity primary key,&#xD;task text check (char_length(task) &amp;gt; 3)&#xD;);&#xD;API URL 和 密钥 link每个Supabase项目都有一个唯一的API URL。你的API被放置在一个API网关后面，每个请求都需要API密钥进行身份验证。&#xA;进入控制面板中的设置页面。 单击侧栏中的 API。 在此页面找到您的API URL、anon和service_role密钥。 通过以下URL可以访问 Supabase 的 REST API 和 GraphQL API：</description>
    </item>
  </channel>
</rss>
